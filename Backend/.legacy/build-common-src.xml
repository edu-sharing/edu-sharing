<?xml version="1.0"?>
<project name="edusharing" basedir="." default="deploy">
	<import file="build-common.xml" />
	<import file="${extensions.path}${extension-name}/build.xml" optional="true" />

	<property name="gwt.module" value="org.edu_sharing.repository.CCSearch" />

	<!-- 
		for java compile no gwt-dev.jar classes, cause they bring some classes with another version
		than they are in original jars 
		i.e.: Base64.class commons-codec-1.4.jar
	-->
	<path id="java.classpath">
		<fileset dir="${app.server.tomcat.shared.lib}" includes="*.jar" />
		<fileset dir="${app.server.tomcat.webapps.alfresco.lib}" includes="*.jar" />
		<fileset dir="${project.lib.path}" includes="*.jar" />
	</path>
		
	
	<path id="project.classpath" >
		<fileset dir="${app.server.tomcat.shared.lib}" includes="*.jar" />
		<fileset dir="${app.server.tomcat.webapps.alfresco.lib}" includes="*.jar" />
		<fileset dir="${project.lib.path}" includes="*.jar" />
	</path>
	
	<target name="src-java-path">
		<condition property="src-java.path" value="${src.dir}:${src-webservices.dir}:${extensions.path}${extension-name}/src" else="${src.dir}:${src-webservices.dir}">
			<isset property="extension-name"/>
		</condition>
		
		<script language="javascript">
			
			echo = project.createTask("echo");
			
			var pluginNames = project.getProperty("plugin-names");
			if(pluginNames != null &amp;&amp; pluginNames.trim().length > 0){
				var pluginNamesArr = pluginNames.split(",");
				for (var i = 0; i &lt; pluginNamesArr.length; i++) {
			   		
					echo.setMessage("plugin active:" + pluginNamesArr[i]);
					echo.perform();
			   	 	
					var pluginsPath = project.getProperty("plugins.path");
					if(pluginsPath != null &amp;&amp; pluginsPath.trim().length > 0){
						var javaPathCurrent = project.getProperty("src-java.path");
						project.setProperty("src-java.path",javaPathCurrent +":"+pluginsPath+pluginNamesArr[i]+"/src" );
					}else{
						echo.setMessage("missing property plugins.path");
						echo.perform();
					}
				}
			}
		</script>
		
		<echo>current source path: ${src-java.path}</echo>
	</target>
	
	<target name="compile-gwt-dev" description="GWT compile to JavaScript">
			<echo message="source folders: ${src-gwt.path}"/>		
			<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
					<classpath>
						<!--<pathelement location="${src.dir}" />-->
						<pathelement path="${src-gwt.path}"/>
						<path refid="project.classpath" />
					</classpath>
					<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
					<jvmarg value="-Xmx1024M" />
					<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
					<arg value="${module-dev.gwt}" />
					<!--<arg value="org.edu_sharing.repository.CCSearchMode0" />-->
					<arg line="-logLevel INFO" />
					
					<!--for development-->
					<arg line="-draftCompile"/>
					<arg line="-style DETAILED"/>
				
					
					<arg line="-localWorkers 2"/>
					
					<arg line="-war ${gwt-war.dir}"/>
				</java>
		</target>
	<target name="compile-gwt-dev-ie8" description="GWT compile to JavaScript">
				<echo message="source folders: ${src-gwt.path}"/>		
				<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
						<classpath>
							<!--<pathelement location="${src.dir}" />-->
							<pathelement path="${src-gwt.path}"/>
							<path refid="project.classpath" />
						</classpath>
						<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
						<jvmarg value="-Xmx1024M" />
						<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
						<arg value="org.edu_sharing.repository.CCSearchDevIE" />
						<arg line="-logLevel INFO" />
						
						<!--for development
						<arg line="-draftCompile"/>
						
						
						<arg line="-style OBFUSCATED"/>
						-->
					<arg line="-style DETAILED"/>
					
					
						
						<arg line="-localWorkers 2"/>
						
						<arg line="-war ${gwt-war.dir}"/>
					</java>
    </target>



	<target name="compile-java" depends="src-java-path">
		<!--delete dir="${output.dir}"></delete-->
		
		<echo>Java Version via Ant: ${ant.java.version}</echo> 
        <echo>Java Version System Prop: ${java.version}</echo> 
		
		<mkdir dir="${output.dir}" />
		<copy todir="${output.dir}">
			<fileset dir="${src.dir}" includes="**/*.xml, **/*.properties, **/*.json">
			</fileset>
		</copy>
		
		<antcall target="copy_extension_resources"></antcall>
		<antcall target="copy_plugin_resources"></antcall>
		
		<javac destdir="${output.dir}" debug="true" deprecation="false" optimize="false" failonerror="true">
			<src path="${src-java.path}" />

			<include name="**/*.java" />
			<classpath refid="java.classpath" />
		</javac>
	
		<!-- hot deployable webservice classes -->
		<jar destfile="lib/edu-sharing-tomcat.jar" basedir="${output.dir}" includes="org/edu_sharing/tomcat/**"/>
		<jar destfile="lib/edu-sharing_webservices.jar" basedir="${output.dir}" includes="${webservice.package}" excludes="**/*.wsdd, ${webservice_alfresco.package}" />
		
		<!-- spring package-->
		<jar destfile="lib/edu-sharing_spring.jar" basedir="${output.dir}" includes="${spring.package}"></jar>
		
		<!-- webdav package -->
		<jar destfile="lib/edu-sharing_webdav.jar" basedir="${output.dir}" includes="${webdav.package}"/>
		
		<!-- cifs package -->
		<jar destfile="lib/edu-sharing_cifs.jar" basedir="${output.dir}" includes="${cifs.package}"/>

		<!-- cmis package -->
		<jar destfile="lib/edu-sharing_cmis.jar" basedir="${output.dir}" includes="${cmis.package}"/>

		<!-- security package -->
		<jar destfile="lib/edu-sharing_security.jar" basedir="${output.dir}" includes="${security.package}"/>

		<jar destfile="lib/edu-sharing_classloaderstuff.jar" basedir="${output.dir}" includes="org/edu_sharing/alfrescocontext/loader/AlfrescoContextClassLoader.class, org/edu_sharing/alfrescocontext/loader/AlfrescoContextClassLoaderUtil.class, org/edu_sharing/repository/tomcat/CustomErrorReportValve.class" />
	</target>
	
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
	    <classpath>
	      <pathelement location="./lib/aspectjtools.jar"/>
	    </classpath>
	</taskdef>

	  <target name="deploy-hupf-foldertemplate" 	description="compile and copy ">
	    <!-- Compile the java code from ${src} into ${build} -->

	  	<!--javac destdir="${output.dir}" debug="true" deprecation="false" optimize="false" failonerror="true">
			<src path="${src-java.path}" />
			<include name="**/*.java" />
			<classpath refid="java.classpath" />
		</javac -->

		<copy overwrite="true" todir="${webserver.home}/webapps/${webapp.name}/WEB-INF/classes/org/edu_sharing/service/foldertemplates">
			<fileset dir="war/WEB-INF/classes/org/edu_sharing/service/foldertemplates" includes="**/*.class">
			</fileset>
		</copy>
		<copy overwrite="true" todir="${webserver.home}/webapps/${webapp.name}/WEB-INF/classes/org/edu_sharing/repository/server">
			<fileset dir="war/WEB-INF/classes/org/edu_sharing/repository/server" includes="TestServletmh.class">
			</fileset>
		</copy>
	  	<tstamp> 
	  		<format property="touch.time" pattern="MM/dd/yyyy hh:mm aa"/>  
	  	</tstamp>
	  	 <touch datetime="${touch.time}">
	  	        <fileset dir="${webserver.home}/webapps/${webapp.name}/WEB-INF" includes="web.xml"/>
	    </touch>  	

	  </target>
	

	<target name="deploy-public">
					<copy todir="${webserver.home}/webapps/${webapp.name}">
						<fileset dir="${src.dir}/org/edu_sharing/repository/public" includes="**">
						</fileset>
					</copy>
					<antcall target="deploy-extension-public"></antcall>
				</target>
	<target name="deploy-css">
				<echo>${gwt-war.dir}/${gwt-rename-to}</echo>
				<copy todir="${webserver.home}/webapps/${webapp.name}">
					<fileset dir="${src.dir}/org/edu_sharing/repository/public" includes="**/*.css, **/*.html, **/*.jsp">
					</fileset>
				</copy>
				<antcall target="deploy-extension-css"></antcall>
			</target>
			<target name="deploy-extension-css" if="extension-name">
				<echo>deploy extension css. extension is active: ${extension-name}</echo>
				
				<!-- convert module package path to folder path -->
				<loadresource property="module.gwt.path">
					<string value="${module.gwt.package}" />
					<filterchain>
						<replaceregex pattern="\." replace="/" flags="g" />
					</filterchain>  
				</loadresource>
				
				<echo message="module path: ${module.gwt.path}" />
				
				<copy todir="${webserver.home}/webapps/${webapp.name}">
					<fileset dir="${extensions.path}${extension-name}/src/${module.gwt.path}/public" includes="**/*.css, **/*.html, **/*.jsp">
					</fileset>
				</copy>
				
						
	</target>
	<target name="deploy-extension-public" if="extension-name">	
		<echo>${extension-name}</echo>
		<echo>${module.gwt.package}</echo>
					<loadresource property="module.gwt.path">
						<string value="${module.gwt.package}" />
						<filterchain>
							<replaceregex pattern="\." replace="/" flags="g" />
						</filterchain>  
					</loadresource>					
					<copy todir="${webserver.home}/webapps/${webapp.name}" failonerror="false">
						<fileset dir="${extensions.path}${extension-name}/src/${module.gwt.path}/public" includes="**">
						</fileset>
					</copy>
					
							
		</target>
			
	<target name="compile-aspectj" depends="clean,compile-java">
	   	<!--<iajc destdir="${output.dir}" sourceroots="${src.dir}" source="1.6" showweaveinfo="true">
	    	<classpath refid="project.classpath" />
	    </iajc>-->
		
		 <iajc destdir="${output.dir}" inpath="${output.dir}" sourceroots="aspects/src" source="1.6" showweaveinfo="true">
			<classpath refid="project.classpath" />
		 </iajc> 
	</target>
	
	<!-- gwt dev mode-->
	<target name="devmode" depends="compile-java" description="Run development mode">
	    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
	      <classpath>
	        <!--<pathelement location="src"/>-->
	      	<pathelement path="${src-gwt.path}"/>
	        <path refid="project.classpath"/>
	      </classpath>
	      <jvmarg value="-Xmx1536M"/>
	    	<!-- use the -noserver option cause:
	    		- jetty gots problems with jsps that got javacode the uses language elements > java 1.5
	    		- we don't need the MCAlfrescoWSClient for development anymore
	    		- disadvantage: we can not debug serversid code anymore in devmode
	    	 -->
	       <arg value="-noserver"/>
	       <arg value="-startupUrl"/>
	     <!-- <arg value="${gwt-rename-to}/index.html"/>-->
	       <arg value="http://127.0.0.1:8080/edu-sharing/"/>
	      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	      <arg value="${module.gwt}"/>
	    </java>
	  </target>
	
	<target name="devmode-debug" depends="compile-java" description="Debug development mode">
	    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
	        <classpath>
	        	<pathelement path="${src-gwt.path}"/>
	        	<path refid="project.classpath"/>
	        </classpath>
	        <jvmarg value="-Xmx1024M" />
	        <jvmarg value="-Xdebug" />
	        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001" />
	    	<!-- use the -noserver option cause:
	    		- jetty gots problems with jsps that got javacode the uses language elements > java 1.5
	    		- we don't need the MCAlfrescoWSClient for development anymore
	    		- disadvantage: we can not debug serversid code anymore in devmode
	    	 -->
	    	<arg value="-noserver"/>
	        <arg value="-startupUrl" />
	    	<!--<arg value="${gwt-rename-to}/index.html"/>-->
	    	<arg value="http://127.0.0.1:8080/edu-sharing/"/>
	        <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	    	<arg line="-war ${gwt-war.dir}"/>
	        <arg value="-logLevel" />
	        <arg value="DEBUG" />
	        <arg value="${module.gwt}" />
	    </java>
	</target>

	
	
	
	<target name="copy_extension_resources" if="extension-name">
		<echo>extension is active: ${extension-name} ${extensions.path}${extension-name}/src</echo>
		<copy todir="${output.dir}" overwrite="true">
			<fileset dir="${extensions.path}${extension-name}/src" includes="**/*.xml, **/*.properties">	
			</fileset>
		</copy>
	</target>
	
	<target name="copy_plugin_resources" if="plugin-names">
		<script language="javascript">
			var pluginNames = project.getProperty("plugin-names");
			if(pluginNames != null &amp;&amp; pluginNames.trim().length > 0){
				var pluginNamesArr = pluginNames.split(",");
				for(var i = 0;i &lt; pluginNamesArr.length; i++){
					project.setProperty("tmp.plugin",pluginNamesArr[i]);
					project.executeTarget("copy_plugin_resources_for_plugin");
				}
			}
		</script>
	</target>
	<target name="copy_plugin_resources_for_plugin">
		<echo>plugins are active: ${plugin-names}</echo>
		<echo>plugin current: ${tmp.plugin}</echo>
		<copy todir="${output.dir}" overwrite="true">
			<fileset dir="${plugins.path}${tmp.plugin}/src" includes="**/*.xml, **/*.properties">	
			</fileset>
		</copy>
	</target>



	<target name="undeploy-projectlibs">
		<delete file="${app.server.project-lib-path}/cc-alfresco-web-service-client.jar" />
		<delete file="${app.server.project-lib-path}/gwt-servlet.jar" />
		<delete file="${app.server.project-lib-path}/gwt-widgets-0.2.0.jar" />
	</target>	
	
	<target name="deploy-java" depends="compile-java,deploy-classes">
	</target>
	<target name="deploy-java-reload" depends="compile-java,deploy-classes,reload">
	</target>
	<target name="check-ng">
		<echo>check ng ${user.dir}</echo>
	    <available file="ng" property="ng.present"/>
	</target>
	
	<target name="deploy-ng" depends="check-ng">
		<fail unless="ng.present" message="ng folder missing! Run import-ng first!"/>
		<copy todir="${webserver.home}/webapps/${webapp.name}/">
			<fileset dir="ng" includes="**"></fileset>
		</copy>
	</target>

	<!-- check which targets the build.xml of the current extension supports -->
	<target name="extension-check-targets" if="extension-name">
		<script language="javascript">
			if(project.getTargets().containsKey("deploy-extension"))
				project.setProperty("deploy-extension","true");
			if(project.getTargets().containsKey("release-extension"))
			project.setProperty("release-extension","true");
		</script>
	</target>
	<target name="deploy-extension-internal" depends="extension-check-targets" if="deploy-extension">
		<ant antfile="${extensions.path}${extension-name}/build.xml" target="deploy-extension"/>
	</target>
	<target name="release-extension-internal" depends="extension-check-targets" if="release-extension">
		<ant antfile="${extensions.path}${extension-name}/build.xml" target="release-extension"/>
	</target>
	<target name="deploy" depends="prepare-alfresco-webapps, compile-java, prepare, deploy-java, deploy-public, deploy-ng, deploy-ng-extension, deploy-extension-internal">
	</target>
	<target name="deploy-reload" depends="deploy, reload" description="Deploy and Reload tomcat app">
	</target>
	<target name="deploy-ssh" depends="deploy, release, copy-ssh-true, copy-ssh-false">
	</target>
	<target name="copy-ssh-false" unless="ssh.host">
		<fail>To use ssh/scp, configure in your build.username.properties ssh.host, ssh.username and ssh.password</fail>
	</target>
	<target name="copy-ssh-true" if="ssh.host">
		<replace file="${release.foldername}/build.properties">
		  <replacetoken><![CDATA[C:/myprogs/]]></replacetoken>
		  <replacevalue><![CDATA[/opt/]]></replacevalue>
		</replace>
		<replace file="${release.foldername}/call-ant.sh">
		  <replacetoken><![CDATA[java]]></replacetoken>
		  <replacevalue><![CDATA[/opt/alfresco-5.0.d/java/bin/java]]></replacevalue>
		</replace>
		<sshexec
		    host="${ssh.host}"
		    username="${ssh.username}"
		    password="${ssh.password}"
		    command="rm -rf /opt/edu-sharing/ &amp;&amp; mkdir -p /opt/edu-sharing"
		    trust="true" />
		<scp password="${ssh.password}" 
			todir="${ssh.username}@${ssh.host}:/opt/edu-sharing/" 
		    compressed="true"
		    filemode="744"
			trust="true">
				<fileset dir="${release.foldername}" />
		</scp>
		<sshexec
		    host="${ssh.host}"
		    username="${ssh.username}"
		    password="${ssh.password}"
		    command="/etc/init.d/alfresco stop &amp;&amp; cd /opt/edu-sharing &amp;&amp; ./install.sh &amp;&amp; /etc/init.d/alfresco start"
		    trust="true" />
	</target>


	<target name="clean">
		<delete dir="${output.dir}" />
		<delete dir="${gwt-war.dir}/${gwt-rename-to}"/>
	</target>

	<target name="reload">
		<touch file="${webserver.home}/webapps/${webapp.name}/WEB-INF/web.xml" />
	</target>
	
	
	<!--
	*
	* Axis Webservice stuff 
	*
	*-->
	
	<target name="AxisJava2wsdl">
		<javac destdir="soap-generation/JavaOrigin/build/classes" debug="true" debuglevel="lines,vars,source" deprecation="false" optimize="false" failonerror="true">
				<src path="soap-generation/JavaOrigin/src" />
				<include name="**/*.java" />
				<classpath>
					<fileset dir="soap-generation/axis-1_4/lib/" includes="*.jar" />
				</classpath>
		</javac>
		<!--NativeAlfrescoWrapper-->
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/NativeAlfrescoWrapper"/>
			<param name="classname" value="org.edu_sharing.webservices.alfresco.extension.NativeAlfrescoWrapper"/>
			<param name="wsdl" value="NativeAlfrescoWrapper.wsdl"/>
		</antcall>
		<!--authentication-->
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/authentication"/>
			<param name="classname" value="org.edu_sharing.webservices.authentication.Authentication"/>
			<param name="wsdl" value="authentication.wsdl"/>
		</antcall>
		
		<antcall target="AxisJava2wsdl_base">
				<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/authbyapp"/>
				<param name="classname" value="org.edu_sharing.webservices.authbyapp.AuthByApp"/>
				<param name="wsdl" value="authbyapp.wsdl"/>
		</antcall>
		
		
		<!-- crud -->
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/crud"/>
			<param name="classname" value="org.edu_sharing.webservices.crud.Crud"/>
			<param name="wsdl" value="crud.wsdl"/>
		</antcall>
		<!-- usage -->
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/usage"/>
			<param name="classname" value="org.edu_sharing.webservices.usage.Usage"/>
			<param name="wsdl" value="usage.wsdl"/>
		</antcall>
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/usage2"/>
			<param name="classname" value="org.edu_sharing.webservices.usage2.Usage2"/>
			<param name="wsdl" value="usage2.wsdl"/>
		</antcall>
		<!-- renderinfo -->
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/RenderInfo"/>
			<param name="classname" value="org.edu_sharing.webservices.render.RenderInfo"/>
			<param name="wsdl" value="RenderInfo.wsdl"/>
		</antcall>
		
		<antcall target="AxisJava2wsdl_base">
			<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/LogoutNotification"/>
			<param name="classname" value="org.edu_sharing.webservices.shibboleth.slo.LogoutNotification"/>
			<param name="wsdl" value="ShibbolethLogoutNotification.wsdl"/>
		</antcall>
		
		<!-- folder templates -->
		<antcall target="AxisJava2wsdl_base">
				<param name="serviceurl" value="http://localhost:8080/edu-sharing/services/FolderTemplate"/>
				<param name="classname" value="org.edu_sharing.webservices.foldertemplate.FolderTemplate"/>
				<param name="wsdl" value="FolderTemplate.wsdl"/>
		</antcall>
		
	
	</target>
	<target name="deploy-ng-extension" if="extension-name">
				<!-- ng2 extension override, added 2017-02-01 -->
				<copy failonerror="false" overwrite="true" todir="${app.server.deploy.dir}/${webapp.name}">
					<fileset dir="${extensions.path}${extension-name}/ng"></fileset> 
				</copy>
	</target>
			
	<target name="AxisJava2wsdl_base">
		<fail unless="serviceurl">Must specify the parameter: ${serviceurl}</fail>
		<fail unless="classname">Must specify the parameter: ${classname}</fail>
		<fail unless="wsdl">Must specify the parameter: ${wsdl}</fail>
		<echo>starting with ${wsdl} ${classname} ${serviceurl}</echo>
		<java classname="org.apache.axis.wsdl.Java2WSDL">
			<arg value="-l${serviceurl}"/>
			<arg value="-yWRAPPED"/>
			<arg value="-uLITERAL"/>
			<arg value="-owebservices/wsdl/${wsdl}"/>
			<arg value="${classname}"/>
			<classpath>
				<fileset dir="soap-generation/axis-1_4/lib/" includes="*.jar" />
				<fileset dir="${app.server.tomcat.webapps.alfresco.lib}" includes="activation*.jar,mail.jar" />
				<pathelement location="soap-generation/JavaOrigin/build/classes"/>
			</classpath>
		</java>
	</target>
	
	<target name="AxisWsdl2java">
			
			<!--NativeAlfrescoWrapper-->
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.alfresco.extension"/>
				<param name="wsdl" value="NativeAlfrescoWrapper.wsdl"/>
				<param name="classname" value="NativeAlfrescoWrapper"/>			
			</antcall>
			<!--authentication-->
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.authentication"/>
				<param name="wsdl" value="authentication.wsdl"/>
				<param name="classname" value="Authentication"/>			
			</antcall>
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.authbyapp"/>
				<param name="wsdl" value="authbyapp.wsdl"/>
				<param name="classname" value="AuthByApp"/>			
			</antcall>
		
			<!-- crud -->
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.crud"/>
				<param name="wsdl" value="crud.wsdl"/>
				<param name="classname" value="Crud"/>			
			</antcall>
			<!-- usage -->
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.usage"/>
				<param name="wsdl" value="usage.wsdl"/>
				<param name="classname" value="Usage"/>			
			</antcall>
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.usage2"/>
				<param name="wsdl" value="usage2.wsdl"/>
				<param name="classname" value="Usage2"/>			
			</antcall>
		    <!-- render -->
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.render"/>
				<param name="wsdl" value="RenderInfo.wsdl"/>
				<param name="classname" value="RenderInfo"/>			
			</antcall>
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.foldertemplate"/>
				<param name="wsdl" value="FolderTemplate.wsdl"/>
				<param name="classname" value="FolderTemplate"/>			
			</antcall>
		
			<antcall target="AxisWsdl2java_base">
				<param name="package" value="org.edu_sharing.webservices.shibboleth.slo"/>
				<param name="wsdl" value="ShibbolethLogoutNotification.wsdl"/>
				<param name="classname" value="LogoutNotification"/>			
			</antcall>
			
			<copy todir="src-webservices">
				<fileset dir="soap-generation/generated/" includes="**/*.java" excludes="**/*Impl.java,org/edu_sharing/repository/client/rpc/*.java"></fileset>
			</copy>
		</target>

		<target name="AxisWsdl2java_base">
			<fail unless="package">Must specify the parameter: ${package}</fail>
			<fail unless="classname">Must specify the parameter: ${classname}</fail>
			<fail unless="wsdl">Must specify the parameter: ${wsdl}</fail>
			<echo>starting with ${wsdl} ${package} ${classname}</echo>
			<java classname="org.apache.axis.wsdl.WSDL2Java" fork="true">
				<arg value="-osoap-generation/generated/."/>
				<arg value="-dSession"/>
				<arg value="-s"/>
				<arg value="-Strue"/>
				<arg value="-Nurn:${classname}"/>
				<arg value="${package}"/>
				<arg value="webservices/wsdl/${wsdl}"/>
				
				<classpath>
					<fileset dir="soap-generation/axis-1_4/lib/" includes="*.jar" />
					<fileset dir="${app.server.tomcat.webapps.alfresco.lib}" includes="activation*.jar,mail.jar" />
				</classpath>
			</java>
		</target>
	
		<target name="AxisWSClient">
			<jar destfile="release/edu-sharing-ws-client.jar" basedir="war/WEB-INF/classes" includes="org/edu_sharing/webservices/**/*.class,org/edu_sharing/repository/client/rpc/GetPreviewResult.class,org/edu_sharing/repository/client/rpc/Share.class, ,org/edu_sharing/repository/client/rpc/Authority.class ,org/edu_sharing/repository/client/rpc/User.class ,org/edu_sharing/repository/client/rpc/Group.class,org/edu_sharing/repository/client/rpc/ACE.class,org/edu_sharing/repository/client/rpc/ACL.class, org/edu_sharing/repository/client/rpc/Notify.class" excludes="**/*Impl.class,**/*Skeleton.class"></jar>
		</target>
	
</project>