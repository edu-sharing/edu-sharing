/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.MdsQueryCriteria;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEntry;
import io.swagger.client.model.SearchParameters;
import io.swagger.client.model.SearchResultNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchV1Api {
    private ApiClient apiClient;

    public SearchV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getRelevantNodes
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRelevantNodesCall(String repository, List<String> propertyFilter, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/relevant/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelevantNodesValidateBeforeCall(String repository, List<String> propertyFilter, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getRelevantNodes(Async)");
        }
        

        com.squareup.okhttp.Call call = getRelevantNodesCall(repository, propertyFilter, maxItems, skipCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get relevant nodes for the current user
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return SearchResultNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultNode getRelevantNodes(String repository, List<String> propertyFilter, Integer maxItems, Integer skipCount) throws ApiException {
        ApiResponse<SearchResultNode> resp = getRelevantNodesWithHttpInfo(repository, propertyFilter, maxItems, skipCount);
        return resp.getData();
    }

    /**
     * Get relevant nodes for the current user
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return ApiResponse&lt;SearchResultNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultNode> getRelevantNodesWithHttpInfo(String repository, List<String> propertyFilter, Integer maxItems, Integer skipCount) throws ApiException {
        com.squareup.okhttp.Call call = getRelevantNodesValidateBeforeCall(repository, propertyFilter, maxItems, skipCount, null, null);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get relevant nodes for the current user (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelevantNodesAsync(String repository, List<String> propertyFilter, Integer maxItems, Integer skipCount, final ApiCallback<SearchResultNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelevantNodesValidateBeforeCall(repository, propertyFilter, maxItems, skipCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadSaveSearch
     * @param nodeId Node id of the search item (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param body facettes (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadSaveSearchCall(String nodeId, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> body, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search/v1/queriesV2/load/{nodeId}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadSaveSearchValidateBeforeCall(String nodeId, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> body, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling loadSaveSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = loadSaveSearchCall(nodeId, contentType, maxItems, skipCount, sortProperties, sortAscending, body, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load a saved search query.
     * Load a saved search query.
     * @param nodeId Node id of the search item (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param body facettes (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node loadSaveSearch(String nodeId, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> body, List<String> propertyFilter) throws ApiException {
        ApiResponse<Node> resp = loadSaveSearchWithHttpInfo(nodeId, contentType, maxItems, skipCount, sortProperties, sortAscending, body, propertyFilter);
        return resp.getData();
    }

    /**
     * Load a saved search query.
     * Load a saved search query.
     * @param nodeId Node id of the search item (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param body facettes (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> loadSaveSearchWithHttpInfo(String nodeId, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> body, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = loadSaveSearchValidateBeforeCall(nodeId, contentType, maxItems, skipCount, sortProperties, sortAscending, body, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load a saved search query. (asynchronously)
     * Load a saved search query.
     * @param nodeId Node id of the search item (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param body facettes (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadSaveSearchAsync(String nodeId, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> body, List<String> propertyFilter, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadSaveSearchValidateBeforeCall(nodeId, contentType, maxItems, skipCount, sortProperties, sortAscending, body, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveSearch
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param name Name of the new search item (required)
     * @param body search parameters (required)
     * @param replace Replace if search with the same name exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSearchCall(String repository, String metadataset, String query, String name, List<MdsQueryCriteria> body, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search/v1/queriesV2/{repository}/{metadataset}/{query}/save"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "metadataset" + "\\}", apiClient.escapeString(metadataset.toString()))
            .replaceAll("\\{" + "query" + "\\}", apiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (replace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replace", replace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveSearchValidateBeforeCall(String repository, String metadataset, String query, String name, List<MdsQueryCriteria> body, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling saveSearch(Async)");
        }
        
        // verify the required parameter 'metadataset' is set
        if (metadataset == null) {
            throw new ApiException("Missing the required parameter 'metadataset' when calling saveSearch(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling saveSearch(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling saveSearch(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling saveSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = saveSearchCall(repository, metadataset, query, name, body, replace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Save a search query.
     * Save a search query.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param name Name of the new search item (required)
     * @param body search parameters (required)
     * @param replace Replace if search with the same name exists (optional, default to false)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry saveSearch(String repository, String metadataset, String query, String name, List<MdsQueryCriteria> body, Boolean replace) throws ApiException {
        ApiResponse<NodeEntry> resp = saveSearchWithHttpInfo(repository, metadataset, query, name, body, replace);
        return resp.getData();
    }

    /**
     * Save a search query.
     * Save a search query.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param name Name of the new search item (required)
     * @param body search parameters (required)
     * @param replace Replace if search with the same name exists (optional, default to false)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> saveSearchWithHttpInfo(String repository, String metadataset, String query, String name, List<MdsQueryCriteria> body, Boolean replace) throws ApiException {
        com.squareup.okhttp.Call call = saveSearchValidateBeforeCall(repository, metadataset, query, name, body, replace, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Save a search query. (asynchronously)
     * Save a search query.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param name Name of the new search item (required)
     * @param body search parameters (required)
     * @param replace Replace if search with the same name exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSearchAsync(String repository, String metadataset, String query, String name, List<MdsQueryCriteria> body, Boolean replace, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSearchValidateBeforeCall(repository, metadataset, query, name, body, replace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchByProperty
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param contentType Type of element (optional)
     * @param combineMode Combine mode, AND or OR, defaults to AND (optional)
     * @param property One (or more) properties to search for, will be combined by specified combine mode (optional)
     * @param value One (or more) values to search for, matching the properties defined before (optional)
     * @param comparator (Optional) comparator, only relevant for date or numerical fields, currently allowed &#x3D;, &lt;&#x3D;, &gt;&#x3D; (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchByPropertyCall(String repository, String contentType, String combineMode, List<String> property, List<String> value, List<String> comparator, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/custom/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (combineMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("combineMode", combineMode));
        if (property != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "property", property));
        if (value != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "value", value));
        if (comparator != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "comparator", comparator));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchByPropertyValidateBeforeCall(String repository, String contentType, String combineMode, List<String> property, List<String> value, List<String> comparator, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchByProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = searchByPropertyCall(repository, contentType, combineMode, property, value, comparator, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for custom properties with custom values
     * e.g. property&#x3D;cm:name, value:*Test*
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param contentType Type of element (optional)
     * @param combineMode Combine mode, AND or OR, defaults to AND (optional)
     * @param property One (or more) properties to search for, will be combined by specified combine mode (optional)
     * @param value One (or more) values to search for, matching the properties defined before (optional)
     * @param comparator (Optional) comparator, only relevant for date or numerical fields, currently allowed &#x3D;, &lt;&#x3D;, &gt;&#x3D; (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResultNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultNode searchByProperty(String repository, String contentType, String combineMode, List<String> property, List<String> value, List<String> comparator, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResultNode> resp = searchByPropertyWithHttpInfo(repository, contentType, combineMode, property, value, comparator, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Search for custom properties with custom values
     * e.g. property&#x3D;cm:name, value:*Test*
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param contentType Type of element (optional)
     * @param combineMode Combine mode, AND or OR, defaults to AND (optional)
     * @param property One (or more) properties to search for, will be combined by specified combine mode (optional)
     * @param value One (or more) values to search for, matching the properties defined before (optional)
     * @param comparator (Optional) comparator, only relevant for date or numerical fields, currently allowed &#x3D;, &lt;&#x3D;, &gt;&#x3D; (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResultNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultNode> searchByPropertyWithHttpInfo(String repository, String contentType, String combineMode, List<String> property, List<String> value, List<String> comparator, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = searchByPropertyValidateBeforeCall(repository, contentType, combineMode, property, value, comparator, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for custom properties with custom values (asynchronously)
     * e.g. property&#x3D;cm:name, value:*Test*
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param contentType Type of element (optional)
     * @param combineMode Combine mode, AND or OR, defaults to AND (optional)
     * @param property One (or more) properties to search for, will be combined by specified combine mode (optional)
     * @param value One (or more) values to search for, matching the properties defined before (optional)
     * @param comparator (Optional) comparator, only relevant for date or numerical fields, currently allowed &#x3D;, &lt;&#x3D;, &gt;&#x3D; (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchByPropertyAsync(String repository, String contentType, String combineMode, List<String> property, List<String> value, List<String> comparator, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResultNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchByPropertyValidateBeforeCall(repository, contentType, combineMode, property, value, comparator, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchFingerprint
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid nodeid (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchFingerprintCall(String repository, String nodeid, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/queries/{repository}/fingerprint/{nodeid}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "nodeid" + "\\}", apiClient.escapeString(nodeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchFingerprintValidateBeforeCall(String repository, String nodeid, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchFingerprint(Async)");
        }
        
        // verify the required parameter 'nodeid' is set
        if (nodeid == null) {
            throw new ApiException("Missing the required parameter 'nodeid' when calling searchFingerprint(Async)");
        }
        

        com.squareup.okhttp.Call call = searchFingerprintCall(repository, nodeid, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Perform queries based on metadata sets.
     * Perform queries based on metadata sets.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid nodeid (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResultNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultNode searchFingerprint(String repository, String nodeid, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResultNode> resp = searchFingerprintWithHttpInfo(repository, nodeid, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Perform queries based on metadata sets.
     * Perform queries based on metadata sets.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid nodeid (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResultNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultNode> searchFingerprintWithHttpInfo(String repository, String nodeid, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = searchFingerprintValidateBeforeCall(repository, nodeid, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform queries based on metadata sets. (asynchronously)
     * Perform queries based on metadata sets.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid nodeid (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchFingerprintAsync(String repository, String nodeid, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResultNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchFingerprintValidateBeforeCall(repository, nodeid, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchV2
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param body search parameters (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchV2Call(String repository, String metadataset, String query, SearchParameters body, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search/v1/queriesV2/{repository}/{metadataset}/{query}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "metadataset" + "\\}", apiClient.escapeString(metadataset.toString()))
            .replaceAll("\\{" + "query" + "\\}", apiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchV2ValidateBeforeCall(String repository, String metadataset, String query, SearchParameters body, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchV2(Async)");
        }
        
        // verify the required parameter 'metadataset' is set
        if (metadataset == null) {
            throw new ApiException("Missing the required parameter 'metadataset' when calling searchV2(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchV2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchV2(Async)");
        }
        

        com.squareup.okhttp.Call call = searchV2Call(repository, metadataset, query, body, contentType, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Perform queries based on metadata sets V2.
     * Perform queries based on metadata sets V2.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param body search parameters (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResultNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultNode searchV2(String repository, String metadataset, String query, SearchParameters body, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResultNode> resp = searchV2WithHttpInfo(repository, metadataset, query, body, contentType, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Perform queries based on metadata sets V2.
     * Perform queries based on metadata sets V2.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param body search parameters (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResultNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultNode> searchV2WithHttpInfo(String repository, String metadataset, String query, SearchParameters body, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = searchV2ValidateBeforeCall(repository, metadataset, query, body, contentType, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform queries based on metadata sets V2. (asynchronously)
     * Perform queries based on metadata sets V2.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param metadataset ID of metadataset (or \&quot;-default-\&quot; for default metadata set) (required)
     * @param query ID of query (required)
     * @param body search parameters (required)
     * @param contentType Type of element (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchV2Async(String repository, String metadataset, String query, SearchParameters body, String contentType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResultNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchV2ValidateBeforeCall(repository, metadataset, query, body, contentType, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
