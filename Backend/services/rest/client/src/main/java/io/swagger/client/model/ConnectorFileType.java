/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConnectorFileType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class ConnectorFileType {
  @SerializedName("ccressourceversion")
  private String ccressourceversion = null;

  @SerializedName("ccressourcetype")
  private String ccressourcetype = null;

  @SerializedName("ccresourcesubtype")
  private String ccresourcesubtype = null;

  @SerializedName("editorType")
  private String editorType = null;

  @SerializedName("mimetype")
  private String mimetype = null;

  @SerializedName("filetype")
  private String filetype = null;

  @SerializedName("creatable")
  private Boolean creatable = false;

  @SerializedName("editable")
  private Boolean editable = false;

  public ConnectorFileType ccressourceversion(String ccressourceversion) {
    this.ccressourceversion = ccressourceversion;
    return this;
  }

   /**
   * Get ccressourceversion
   * @return ccressourceversion
  **/
  @ApiModelProperty(value = "")
  public String getCcressourceversion() {
    return ccressourceversion;
  }

  public void setCcressourceversion(String ccressourceversion) {
    this.ccressourceversion = ccressourceversion;
  }

  public ConnectorFileType ccressourcetype(String ccressourcetype) {
    this.ccressourcetype = ccressourcetype;
    return this;
  }

   /**
   * Get ccressourcetype
   * @return ccressourcetype
  **/
  @ApiModelProperty(value = "")
  public String getCcressourcetype() {
    return ccressourcetype;
  }

  public void setCcressourcetype(String ccressourcetype) {
    this.ccressourcetype = ccressourcetype;
  }

  public ConnectorFileType ccresourcesubtype(String ccresourcesubtype) {
    this.ccresourcesubtype = ccresourcesubtype;
    return this;
  }

   /**
   * Get ccresourcesubtype
   * @return ccresourcesubtype
  **/
  @ApiModelProperty(value = "")
  public String getCcresourcesubtype() {
    return ccresourcesubtype;
  }

  public void setCcresourcesubtype(String ccresourcesubtype) {
    this.ccresourcesubtype = ccresourcesubtype;
  }

  public ConnectorFileType editorType(String editorType) {
    this.editorType = editorType;
    return this;
  }

   /**
   * Get editorType
   * @return editorType
  **/
  @ApiModelProperty(value = "")
  public String getEditorType() {
    return editorType;
  }

  public void setEditorType(String editorType) {
    this.editorType = editorType;
  }

  public ConnectorFileType mimetype(String mimetype) {
    this.mimetype = mimetype;
    return this;
  }

   /**
   * Get mimetype
   * @return mimetype
  **/
  @ApiModelProperty(value = "")
  public String getMimetype() {
    return mimetype;
  }

  public void setMimetype(String mimetype) {
    this.mimetype = mimetype;
  }

  public ConnectorFileType filetype(String filetype) {
    this.filetype = filetype;
    return this;
  }

   /**
   * Get filetype
   * @return filetype
  **/
  @ApiModelProperty(value = "")
  public String getFiletype() {
    return filetype;
  }

  public void setFiletype(String filetype) {
    this.filetype = filetype;
  }

  public ConnectorFileType creatable(Boolean creatable) {
    this.creatable = creatable;
    return this;
  }

   /**
   * Get creatable
   * @return creatable
  **/
  @ApiModelProperty(value = "")
  public Boolean isCreatable() {
    return creatable;
  }

  public void setCreatable(Boolean creatable) {
    this.creatable = creatable;
  }

  public ConnectorFileType editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Get editable
   * @return editable
  **/
  @ApiModelProperty(value = "")
  public Boolean isEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorFileType connectorFileType = (ConnectorFileType) o;
    return Objects.equals(this.ccressourceversion, connectorFileType.ccressourceversion) &&
        Objects.equals(this.ccressourcetype, connectorFileType.ccressourcetype) &&
        Objects.equals(this.ccresourcesubtype, connectorFileType.ccresourcesubtype) &&
        Objects.equals(this.editorType, connectorFileType.editorType) &&
        Objects.equals(this.mimetype, connectorFileType.mimetype) &&
        Objects.equals(this.filetype, connectorFileType.filetype) &&
        Objects.equals(this.creatable, connectorFileType.creatable) &&
        Objects.equals(this.editable, connectorFileType.editable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ccressourceversion, ccressourcetype, ccresourcesubtype, editorType, mimetype, filetype, creatable, editable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorFileType {\n");
    
    sb.append("    ccressourceversion: ").append(toIndentedString(ccressourceversion)).append("\n");
    sb.append("    ccressourcetype: ").append(toIndentedString(ccressourcetype)).append("\n");
    sb.append("    ccresourcesubtype: ").append(toIndentedString(ccresourcesubtype)).append("\n");
    sb.append("    editorType: ").append(toIndentedString(editorType)).append("\n");
    sb.append("    mimetype: ").append(toIndentedString(mimetype)).append("\n");
    sb.append("    filetype: ").append(toIndentedString(filetype)).append("\n");
    sb.append("    creatable: ").append(toIndentedString(creatable)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

