/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import java.io.File;
import io.swagger.client.model.Group;
import io.swagger.client.model.McOrgConnectResult;
import io.swagger.client.model.Mediacenter;
import io.swagger.client.model.MediacentersImportResult;
import io.swagger.client.model.OrganisationsImportResult;
import io.swagger.client.model.Profile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediacenterV1Api {
    private ApiClient apiClient;

    public MediacenterV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public MediacenterV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMediacenterGroup
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should be managed by that mediacenter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMediacenterGroupCall(String repository, String mediacenter, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMediacenterGroupValidateBeforeCall(String repository, String mediacenter, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addMediacenterGroup(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling addMediacenterGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling addMediacenterGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = addMediacenterGroupCall(repository, mediacenter, group, progressListener, progressRequestListener);
        return call;

    }

    /**
     * add a group that is managed by the given mediacenter
     * although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should be managed by that mediacenter (required)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Group> addMediacenterGroup(String repository, String mediacenter, String group) throws ApiException {
        ApiResponse<List<Group>> resp = addMediacenterGroupWithHttpInfo(repository, mediacenter, group);
        return resp.getData();
    }

    /**
     * add a group that is managed by the given mediacenter
     * although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should be managed by that mediacenter (required)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Group>> addMediacenterGroupWithHttpInfo(String repository, String mediacenter, String group) throws ApiException {
        com.squareup.okhttp.Call call = addMediacenterGroupValidateBeforeCall(repository, mediacenter, group, null, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add a group that is managed by the given mediacenter (asynchronously)
     * although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should be managed by that mediacenter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMediacenterGroupAsync(String repository, String mediacenter, String group, final ApiCallback<List<Group>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMediacenterGroupValidateBeforeCall(repository, mediacenter, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMediacenter
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMediacenterCall(String repository, String mediacenter, Profile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMediacenterValidateBeforeCall(String repository, String mediacenter, Profile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createMediacenter(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling createMediacenter(Async)");
        }
        

        com.squareup.okhttp.Call call = createMediacenterCall(repository, mediacenter, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create new mediacenter in repository.
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @return Mediacenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mediacenter createMediacenter(String repository, String mediacenter, Profile body) throws ApiException {
        ApiResponse<Mediacenter> resp = createMediacenterWithHttpInfo(repository, mediacenter, body);
        return resp.getData();
    }

    /**
     * create new mediacenter in repository.
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Mediacenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mediacenter> createMediacenterWithHttpInfo(String repository, String mediacenter, Profile body) throws ApiException {
        com.squareup.okhttp.Call call = createMediacenterValidateBeforeCall(repository, mediacenter, body, null, null);
        Type localVarReturnType = new TypeToken<Mediacenter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create new mediacenter in repository. (asynchronously)
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMediacenterAsync(String repository, String mediacenter, Profile body, final ApiCallback<Mediacenter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMediacenterValidateBeforeCall(repository, mediacenter, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mediacenter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for editMediacenter
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editMediacenterCall(String repository, String mediacenter, Profile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editMediacenterValidateBeforeCall(String repository, String mediacenter, Profile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling editMediacenter(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling editMediacenter(Async)");
        }
        

        com.squareup.okhttp.Call call = editMediacenterCall(repository, mediacenter, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * edit a mediacenter in repository.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @return Mediacenter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mediacenter editMediacenter(String repository, String mediacenter, Profile body) throws ApiException {
        ApiResponse<Mediacenter> resp = editMediacenterWithHttpInfo(repository, mediacenter, body);
        return resp.getData();
    }

    /**
     * edit a mediacenter in repository.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Mediacenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mediacenter> editMediacenterWithHttpInfo(String repository, String mediacenter, Profile body) throws ApiException {
        com.squareup.okhttp.Call call = editMediacenterValidateBeforeCall(repository, mediacenter, body, null, null);
        Type localVarReturnType = new TypeToken<Mediacenter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * edit a mediacenter in repository. (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter mediacenter name (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editMediacenterAsync(String repository, String mediacenter, Profile body, final ApiCallback<Mediacenter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editMediacenterValidateBeforeCall(repository, mediacenter, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mediacenter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMediacenterGroups
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMediacenterGroupsCall(String repository, String mediacenter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMediacenterGroupsValidateBeforeCall(String repository, String mediacenter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMediacenterGroups(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling getMediacenterGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = getMediacenterGroupsCall(repository, mediacenter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get groups that are managed by the given mediacenter
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Group> getMediacenterGroups(String repository, String mediacenter) throws ApiException {
        ApiResponse<List<Group>> resp = getMediacenterGroupsWithHttpInfo(repository, mediacenter);
        return resp.getData();
    }

    /**
     * get groups that are managed by the given mediacenter
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Group>> getMediacenterGroupsWithHttpInfo(String repository, String mediacenter) throws ApiException {
        com.squareup.okhttp.Call call = getMediacenterGroupsValidateBeforeCall(repository, mediacenter, null, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get groups that are managed by the given mediacenter (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMediacenterGroupsAsync(String repository, String mediacenter, final ApiCallback<List<Group>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMediacenterGroupsValidateBeforeCall(repository, mediacenter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMediacenterLicensedNodes
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that licenses nodes (required)
     * @param searchword searchword of licensed nodes (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMediacenterLicensedNodesCall(String repository, String mediacenter, String searchword, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/licenses"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));
        if (searchword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchword", searchword));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMediacenterLicensedNodesValidateBeforeCall(String repository, String mediacenter, String searchword, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMediacenterLicensedNodes(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling getMediacenterLicensedNodes(Async)");
        }
        
        // verify the required parameter 'searchword' is set
        if (searchword == null) {
            throw new ApiException("Missing the required parameter 'searchword' when calling getMediacenterLicensedNodes(Async)");
        }
        

        com.squareup.okhttp.Call call = getMediacenterLicensedNodesCall(repository, mediacenter, searchword, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get nodes that are licensed by the given mediacenter
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that licenses nodes (required)
     * @param searchword searchword of licensed nodes (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Group> getMediacenterLicensedNodes(String repository, String mediacenter, String searchword, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<List<Group>> resp = getMediacenterLicensedNodesWithHttpInfo(repository, mediacenter, searchword, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * get nodes that are licensed by the given mediacenter
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that licenses nodes (required)
     * @param searchword searchword of licensed nodes (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Group>> getMediacenterLicensedNodesWithHttpInfo(String repository, String mediacenter, String searchword, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getMediacenterLicensedNodesValidateBeforeCall(repository, mediacenter, searchword, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get nodes that are licensed by the given mediacenter (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that licenses nodes (required)
     * @param searchword searchword of licensed nodes (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMediacenterLicensedNodesAsync(String repository, String mediacenter, String searchword, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<List<Group>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMediacenterLicensedNodesValidateBeforeCall(repository, mediacenter, searchword, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMediacenters
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMediacentersCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMediacentersValidateBeforeCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMediacenters(Async)");
        }
        

        com.squareup.okhttp.Call call = getMediacentersCall(repository, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get mediacenters in the repository.
     * Only shows the one available/managing the current user (only admin can access all)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return List&lt;Mediacenter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Mediacenter> getMediacenters(String repository) throws ApiException {
        ApiResponse<List<Mediacenter>> resp = getMediacentersWithHttpInfo(repository);
        return resp.getData();
    }

    /**
     * get mediacenters in the repository.
     * Only shows the one available/managing the current user (only admin can access all)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return ApiResponse&lt;List&lt;Mediacenter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Mediacenter>> getMediacentersWithHttpInfo(String repository) throws ApiException {
        com.squareup.okhttp.Call call = getMediacentersValidateBeforeCall(repository, null, null);
        Type localVarReturnType = new TypeToken<List<Mediacenter>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get mediacenters in the repository. (asynchronously)
     * Only shows the one available/managing the current user (only admin can access all)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMediacentersAsync(String repository, final ApiCallback<List<Mediacenter>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMediacentersValidateBeforeCall(repository, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Mediacenter>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importMcOrgConnections
     * @param mcOrgs Mediacenter Organisation Connection csv to import (required)
     * @param removeSchoolsFromMC removeSchoolsFromMC (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importMcOrgConnectionsCall(File mcOrgs, Boolean removeSchoolsFromMC, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/import/mc_org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (removeSchoolsFromMC != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeSchoolsFromMC", removeSchoolsFromMC));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (mcOrgs != null)
        localVarFormParams.put("mcOrgs", mcOrgs);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importMcOrgConnectionsValidateBeforeCall(File mcOrgs, Boolean removeSchoolsFromMC, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mcOrgs' is set
        if (mcOrgs == null) {
            throw new ApiException("Missing the required parameter 'mcOrgs' when calling importMcOrgConnections(Async)");
        }
        

        com.squareup.okhttp.Call call = importMcOrgConnectionsCall(mcOrgs, removeSchoolsFromMC, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import Mediacenter Organisation Connection
     * Import Mediacenter Organisation Connection.
     * @param mcOrgs Mediacenter Organisation Connection csv to import (required)
     * @param removeSchoolsFromMC removeSchoolsFromMC (optional, default to false)
     * @return McOrgConnectResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public McOrgConnectResult importMcOrgConnections(File mcOrgs, Boolean removeSchoolsFromMC) throws ApiException {
        ApiResponse<McOrgConnectResult> resp = importMcOrgConnectionsWithHttpInfo(mcOrgs, removeSchoolsFromMC);
        return resp.getData();
    }

    /**
     * Import Mediacenter Organisation Connection
     * Import Mediacenter Organisation Connection.
     * @param mcOrgs Mediacenter Organisation Connection csv to import (required)
     * @param removeSchoolsFromMC removeSchoolsFromMC (optional, default to false)
     * @return ApiResponse&lt;McOrgConnectResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<McOrgConnectResult> importMcOrgConnectionsWithHttpInfo(File mcOrgs, Boolean removeSchoolsFromMC) throws ApiException {
        com.squareup.okhttp.Call call = importMcOrgConnectionsValidateBeforeCall(mcOrgs, removeSchoolsFromMC, null, null);
        Type localVarReturnType = new TypeToken<McOrgConnectResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import Mediacenter Organisation Connection (asynchronously)
     * Import Mediacenter Organisation Connection.
     * @param mcOrgs Mediacenter Organisation Connection csv to import (required)
     * @param removeSchoolsFromMC removeSchoolsFromMC (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importMcOrgConnectionsAsync(File mcOrgs, Boolean removeSchoolsFromMC, final ApiCallback<McOrgConnectResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importMcOrgConnectionsValidateBeforeCall(mcOrgs, removeSchoolsFromMC, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<McOrgConnectResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importMediacenters
     * @param mediacenters Mediacenters csv to import (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importMediacentersCall(File mediacenters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/import/mediacenters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (mediacenters != null)
        localVarFormParams.put("mediacenters", mediacenters);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importMediacentersValidateBeforeCall(File mediacenters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mediacenters' is set
        if (mediacenters == null) {
            throw new ApiException("Missing the required parameter 'mediacenters' when calling importMediacenters(Async)");
        }
        

        com.squareup.okhttp.Call call = importMediacentersCall(mediacenters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import mediacenters
     * Import mediacenters.
     * @param mediacenters Mediacenters csv to import (required)
     * @return MediacentersImportResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MediacentersImportResult importMediacenters(File mediacenters) throws ApiException {
        ApiResponse<MediacentersImportResult> resp = importMediacentersWithHttpInfo(mediacenters);
        return resp.getData();
    }

    /**
     * Import mediacenters
     * Import mediacenters.
     * @param mediacenters Mediacenters csv to import (required)
     * @return ApiResponse&lt;MediacentersImportResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MediacentersImportResult> importMediacentersWithHttpInfo(File mediacenters) throws ApiException {
        com.squareup.okhttp.Call call = importMediacentersValidateBeforeCall(mediacenters, null, null);
        Type localVarReturnType = new TypeToken<MediacentersImportResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import mediacenters (asynchronously)
     * Import mediacenters.
     * @param mediacenters Mediacenters csv to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importMediacentersAsync(File mediacenters, final ApiCallback<MediacentersImportResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importMediacentersValidateBeforeCall(mediacenters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MediacentersImportResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importOrganisations
     * @param organisations Organisations csv to import (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importOrganisationsCall(File organisations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/import/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (organisations != null)
        localVarFormParams.put("organisations", organisations);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importOrganisationsValidateBeforeCall(File organisations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisations' is set
        if (organisations == null) {
            throw new ApiException("Missing the required parameter 'organisations' when calling importOrganisations(Async)");
        }
        

        com.squareup.okhttp.Call call = importOrganisationsCall(organisations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import Organisations
     * Import Organisations.
     * @param organisations Organisations csv to import (required)
     * @return OrganisationsImportResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationsImportResult importOrganisations(File organisations) throws ApiException {
        ApiResponse<OrganisationsImportResult> resp = importOrganisationsWithHttpInfo(organisations);
        return resp.getData();
    }

    /**
     * Import Organisations
     * Import Organisations.
     * @param organisations Organisations csv to import (required)
     * @return ApiResponse&lt;OrganisationsImportResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationsImportResult> importOrganisationsWithHttpInfo(File organisations) throws ApiException {
        com.squareup.okhttp.Call call = importOrganisationsValidateBeforeCall(organisations, null, null);
        Type localVarReturnType = new TypeToken<OrganisationsImportResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import Organisations (asynchronously)
     * Import Organisations.
     * @param organisations Organisations csv to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importOrganisationsAsync(File organisations, final ApiCallback<OrganisationsImportResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importOrganisationsValidateBeforeCall(organisations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationsImportResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeMediacenterGroup
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should not longer be managed by that mediacenter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeMediacenterGroupCall(String repository, String mediacenter, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "mediacenter" + "\\}", apiClient.escapeString(mediacenter.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeMediacenterGroupValidateBeforeCall(String repository, String mediacenter, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling removeMediacenterGroup(Async)");
        }
        
        // verify the required parameter 'mediacenter' is set
        if (mediacenter == null) {
            throw new ApiException("Missing the required parameter 'mediacenter' when calling removeMediacenterGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling removeMediacenterGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = removeMediacenterGroupCall(repository, mediacenter, group, progressListener, progressRequestListener);
        return call;

    }

    /**
     * delete a group that is managed by the given mediacenter
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should not longer be managed by that mediacenter (required)
     * @return List&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Group> removeMediacenterGroup(String repository, String mediacenter, String group) throws ApiException {
        ApiResponse<List<Group>> resp = removeMediacenterGroupWithHttpInfo(repository, mediacenter, group);
        return resp.getData();
    }

    /**
     * delete a group that is managed by the given mediacenter
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should not longer be managed by that mediacenter (required)
     * @return ApiResponse&lt;List&lt;Group&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Group>> removeMediacenterGroupWithHttpInfo(String repository, String mediacenter, String group) throws ApiException {
        com.squareup.okhttp.Call call = removeMediacenterGroupValidateBeforeCall(repository, mediacenter, group, null, null);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete a group that is managed by the given mediacenter (asynchronously)
     * admin rights are required.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param mediacenter authorityName of the mediacenter that should manage the group (required)
     * @param group authorityName of the group that should not longer be managed by that mediacenter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMediacenterGroupAsync(String repository, String mediacenter, String group, final ApiCallback<List<Group>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMediacenterGroupValidateBeforeCall(repository, mediacenter, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Group>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
