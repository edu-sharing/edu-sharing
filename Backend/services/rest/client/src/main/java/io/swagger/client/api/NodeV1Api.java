/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ACL;
import io.swagger.client.model.ErrorResponse;
import java.io.File;
import io.swagger.client.model.NodeEntries;
import io.swagger.client.model.NodeEntry;
import io.swagger.client.model.NodeLocked;
import io.swagger.client.model.NodePermissionEntry;
import io.swagger.client.model.NodeRemote;
import io.swagger.client.model.NodeShare;
import io.swagger.client.model.NodeText;
import io.swagger.client.model.NodeVersionEntry;
import io.swagger.client.model.NodeVersionRefEntries;
import io.swagger.client.model.NotifyEntry;
import io.swagger.client.model.ParentEntries;
import io.swagger.client.model.SearchResult;
import io.swagger.client.model.WorkflowHistory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NodeV1Api {
    private ApiClient apiClient;

    public NodeV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public NodeV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAspects
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body aspect name, e.g. ccm:lomreplication (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAspectsCall(String repository, String node, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/aspects"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAspectsValidateBeforeCall(String repository, String node, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addAspects(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addAspects(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addAspects(Async)");
        }
        

        com.squareup.okhttp.Call call = addAspectsCall(repository, node, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add aspect to node.
     * Add aspect to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body aspect name, e.g. ccm:lomreplication (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry addAspects(String repository, String node, List<String> body) throws ApiException {
        ApiResponse<NodeEntry> resp = addAspectsWithHttpInfo(repository, node, body);
        return resp.getData();
    }

    /**
     * Add aspect to node.
     * Add aspect to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body aspect name, e.g. ccm:lomreplication (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> addAspectsWithHttpInfo(String repository, String node, List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = addAspectsValidateBeforeCall(repository, node, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add aspect to node. (asynchronously)
     * Add aspect to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body aspect name, e.g. ccm:lomreplication (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAspectsAsync(String repository, String node, List<String> body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAspectsValidateBeforeCall(repository, node, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addWorkflowHistory
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body The history entry to put (editor and time can be null and will be filled automatically) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addWorkflowHistoryCall(String repository, String node, WorkflowHistory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/workflow"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWorkflowHistoryValidateBeforeCall(String repository, String node, WorkflowHistory body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addWorkflowHistory(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addWorkflowHistory(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addWorkflowHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = addWorkflowHistoryCall(repository, node, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add workflow.
     * Add workflow entry to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body The history entry to put (editor and time can be null and will be filled automatically) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWorkflowHistory(String repository, String node, WorkflowHistory body) throws ApiException {
        addWorkflowHistoryWithHttpInfo(repository, node, body);
    }

    /**
     * Add workflow.
     * Add workflow entry to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body The history entry to put (editor and time can be null and will be filled automatically) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWorkflowHistoryWithHttpInfo(String repository, String node, WorkflowHistory body) throws ApiException {
        com.squareup.okhttp.Call call = addWorkflowHistoryValidateBeforeCall(repository, node, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add workflow. (asynchronously)
     * Add workflow entry to node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body The history entry to put (editor and time can be null and will be filled automatically) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWorkflowHistoryAsync(String repository, String node, WorkflowHistory body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWorkflowHistoryValidateBeforeCall(repository, node, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeContent
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeContentCall(String repository, String node, String mimetype, String versionComment, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/content"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));
        if (mimetype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mimetype", mimetype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeContentValidateBeforeCall(String repository, String node, String mimetype, String versionComment, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeContent(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeContent(Async)");
        }
        
        // verify the required parameter 'mimetype' is set
        if (mimetype == null) {
            throw new ApiException("Missing the required parameter 'mimetype' when calling changeContent(Async)");
        }
        

        com.squareup.okhttp.Call call = changeContentCall(repository, node, mimetype, versionComment, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change content of node.
     * Change content of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param file  (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeContent(String repository, String node, String mimetype, String versionComment, File file) throws ApiException {
        ApiResponse<NodeEntry> resp = changeContentWithHttpInfo(repository, node, mimetype, versionComment, file);
        return resp.getData();
    }

    /**
     * Change content of node.
     * Change content of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeContentWithHttpInfo(String repository, String node, String mimetype, String versionComment, File file) throws ApiException {
        com.squareup.okhttp.Call call = changeContentValidateBeforeCall(repository, node, mimetype, versionComment, file, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change content of node. (asynchronously)
     * Change content of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeContentAsync(String repository, String node, String mimetype, String versionComment, File file, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeContentValidateBeforeCall(repository, node, mimetype, versionComment, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeContentAsText
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param body The content data to write (text) (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeContentAsTextCall(String repository, String node, String mimetype, String body, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/textContent"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));
        if (mimetype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mimetype", mimetype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeContentAsTextValidateBeforeCall(String repository, String node, String mimetype, String body, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeContentAsText(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeContentAsText(Async)");
        }
        
        // verify the required parameter 'mimetype' is set
        if (mimetype == null) {
            throw new ApiException("Missing the required parameter 'mimetype' when calling changeContentAsText(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeContentAsText(Async)");
        }
        

        com.squareup.okhttp.Call call = changeContentAsTextCall(repository, node, mimetype, body, versionComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change content of node as text.
     * Change content of node as text.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param body The content data to write (text) (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeContentAsText(String repository, String node, String mimetype, String body, String versionComment) throws ApiException {
        ApiResponse<NodeEntry> resp = changeContentAsTextWithHttpInfo(repository, node, mimetype, body, versionComment);
        return resp.getData();
    }

    /**
     * Change content of node as text.
     * Change content of node as text.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param body The content data to write (text) (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeContentAsTextWithHttpInfo(String repository, String node, String mimetype, String body, String versionComment) throws ApiException {
        com.squareup.okhttp.Call call = changeContentAsTextValidateBeforeCall(repository, node, mimetype, body, versionComment, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change content of node as text. (asynchronously)
     * Change content of node as text.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param body The content data to write (text) (required)
     * @param versionComment comment, leave empty &#x3D; no new version, otherwise new version is generated (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeContentAsTextAsync(String repository, String node, String mimetype, String body, String versionComment, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeContentAsTextValidateBeforeCall(repository, node, mimetype, body, versionComment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeMetadata
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeMetadataCall(String repository, String node, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeMetadataValidateBeforeCall(String repository, String node, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeMetadata(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = changeMetadataCall(repository, node, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change metadata of node.
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeMetadata(String repository, String node, Object body) throws ApiException {
        ApiResponse<NodeEntry> resp = changeMetadataWithHttpInfo(repository, node, body);
        return resp.getData();
    }

    /**
     * Change metadata of node.
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeMetadataWithHttpInfo(String repository, String node, Object body) throws ApiException {
        com.squareup.okhttp.Call call = changeMetadataValidateBeforeCall(repository, node, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change metadata of node. (asynchronously)
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeMetadataAsync(String repository, String node, Object body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeMetadataValidateBeforeCall(repository, node, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeMetadataWithVersioning
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeMetadataWithVersioningCall(String repository, String node, String versionComment, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeMetadataWithVersioningValidateBeforeCall(String repository, String node, String versionComment, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'versionComment' is set
        if (versionComment == null) {
            throw new ApiException("Missing the required parameter 'versionComment' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeMetadataWithVersioning(Async)");
        }
        

        com.squareup.okhttp.Call call = changeMetadataWithVersioningCall(repository, node, versionComment, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change metadata of node (new version).
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeMetadataWithVersioning(String repository, String node, String versionComment, Object body) throws ApiException {
        ApiResponse<NodeEntry> resp = changeMetadataWithVersioningWithHttpInfo(repository, node, versionComment, body);
        return resp.getData();
    }

    /**
     * Change metadata of node (new version).
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeMetadataWithVersioningWithHttpInfo(String repository, String node, String versionComment, Object body) throws ApiException {
        com.squareup.okhttp.Call call = changeMetadataWithVersioningValidateBeforeCall(repository, node, versionComment, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change metadata of node (new version). (asynchronously)
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeMetadataWithVersioningAsync(String repository, String node, String versionComment, Object body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeMetadataWithVersioningValidateBeforeCall(repository, node, versionComment, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changePreview
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param image  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changePreviewCall(String repository, String node, String mimetype, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/preview"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mimetype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mimetype", mimetype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePreviewValidateBeforeCall(String repository, String node, String mimetype, File image, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changePreview(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changePreview(Async)");
        }
        
        // verify the required parameter 'mimetype' is set
        if (mimetype == null) {
            throw new ApiException("Missing the required parameter 'mimetype' when calling changePreview(Async)");
        }
        

        com.squareup.okhttp.Call call = changePreviewCall(repository, node, mimetype, image, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change preview of node.
     * Change preview of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param image  (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changePreview(String repository, String node, String mimetype, File image) throws ApiException {
        ApiResponse<NodeEntry> resp = changePreviewWithHttpInfo(repository, node, mimetype, image);
        return resp.getData();
    }

    /**
     * Change preview of node.
     * Change preview of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param image  (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changePreviewWithHttpInfo(String repository, String node, String mimetype, File image) throws ApiException {
        com.squareup.okhttp.Call call = changePreviewValidateBeforeCall(repository, node, mimetype, image, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change preview of node. (asynchronously)
     * Change preview of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param mimetype MIME-Type (required)
     * @param image  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePreviewAsync(String repository, String node, String mimetype, File image, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePreviewValidateBeforeCall(repository, node, mimetype, image, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeTemplateMetadata
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param enable Is the inherition currently enabled (required)
     * @param body properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeTemplateMetadataCall(String repository, String node, Boolean enable, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata/template"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable", enable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeTemplateMetadataValidateBeforeCall(String repository, String node, Boolean enable, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeTemplateMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeTemplateMetadata(Async)");
        }
        
        // verify the required parameter 'enable' is set
        if (enable == null) {
            throw new ApiException("Missing the required parameter 'enable' when calling changeTemplateMetadata(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeTemplateMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = changeTemplateMetadataCall(repository, node, enable, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set the metadata template for this folder.
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param enable Is the inherition currently enabled (required)
     * @param body properties (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeTemplateMetadata(String repository, String node, Boolean enable, Object body) throws ApiException {
        ApiResponse<NodeEntry> resp = changeTemplateMetadataWithHttpInfo(repository, node, enable, body);
        return resp.getData();
    }

    /**
     * Set the metadata template for this folder.
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param enable Is the inherition currently enabled (required)
     * @param body properties (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeTemplateMetadataWithHttpInfo(String repository, String node, Boolean enable, Object body) throws ApiException {
        com.squareup.okhttp.Call call = changeTemplateMetadataValidateBeforeCall(repository, node, enable, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set the metadata template for this folder. (asynchronously)
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param enable Is the inherition currently enabled (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeTemplateMetadataAsync(String repository, String node, Boolean enable, Object body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeTemplateMetadataValidateBeforeCall(repository, node, enable, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createChild
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node use -userhome- for userhome or -inbox- for inbox node (required)
     * @param type type of node (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param aspects aspects of node (optional)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param assocType Association type, can be empty (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChildCall(String repository, String node, String type, Object body, List<String> aspects, Boolean renameIfExists, String versionComment, String assocType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (aspects != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "aspects", aspects));
        if (renameIfExists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renameIfExists", renameIfExists));
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));
        if (assocType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assocType", assocType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChildValidateBeforeCall(String repository, String node, String type, Object body, List<String> aspects, Boolean renameIfExists, String versionComment, String assocType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChild(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChild(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createChild(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createChild(Async)");
        }
        

        com.squareup.okhttp.Call call = createChildCall(repository, node, type, body, aspects, renameIfExists, versionComment, assocType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new child.
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node use -userhome- for userhome or -inbox- for inbox node (required)
     * @param type type of node (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param aspects aspects of node (optional)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param assocType Association type, can be empty (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChild(String repository, String node, String type, Object body, List<String> aspects, Boolean renameIfExists, String versionComment, String assocType) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildWithHttpInfo(repository, node, type, body, aspects, renameIfExists, versionComment, assocType);
        return resp.getData();
    }

    /**
     * Create a new child.
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node use -userhome- for userhome or -inbox- for inbox node (required)
     * @param type type of node (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param aspects aspects of node (optional)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param assocType Association type, can be empty (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildWithHttpInfo(String repository, String node, String type, Object body, List<String> aspects, Boolean renameIfExists, String versionComment, String assocType) throws ApiException {
        com.squareup.okhttp.Call call = createChildValidateBeforeCall(repository, node, type, body, aspects, renameIfExists, versionComment, assocType, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child. (asynchronously)
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node use -userhome- for userhome or -inbox- for inbox node (required)
     * @param type type of node (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param aspects aspects of node (optional)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param assocType Association type, can be empty (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildAsync(String repository, String node, String type, Object body, List<String> aspects, Boolean renameIfExists, String versionComment, String assocType, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildValidateBeforeCall(repository, node, type, body, aspects, renameIfExists, versionComment, assocType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createChildByCopying
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChildByCopyingCall(String repository, String node, String source, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children/_copy"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChildByCopyingValidateBeforeCall(String repository, String node, String source, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'withChildren' is set
        if (withChildren == null) {
            throw new ApiException("Missing the required parameter 'withChildren' when calling createChildByCopying(Async)");
        }
        

        com.squareup.okhttp.Call call = createChildByCopyingCall(repository, node, source, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new child by copying.
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChildByCopying(String repository, String node, String source, Boolean withChildren) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildByCopyingWithHttpInfo(repository, node, source, withChildren);
        return resp.getData();
    }

    /**
     * Create a new child by copying.
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildByCopyingWithHttpInfo(String repository, String node, String source, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = createChildByCopyingValidateBeforeCall(repository, node, source, withChildren, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child by copying. (asynchronously)
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildByCopyingAsync(String repository, String node, String source, Boolean withChildren, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildByCopyingValidateBeforeCall(repository, node, source, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createChildByMoving
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChildByMovingCall(String repository, String node, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children/_move"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChildByMovingValidateBeforeCall(String repository, String node, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChildByMoving(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChildByMoving(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createChildByMoving(Async)");
        }
        

        com.squareup.okhttp.Call call = createChildByMovingCall(repository, node, source, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new child by moving.
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChildByMoving(String repository, String node, String source) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildByMovingWithHttpInfo(repository, node, source);
        return resp.getData();
    }

    /**
     * Create a new child by moving.
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildByMovingWithHttpInfo(String repository, String node, String source) throws ApiException {
        com.squareup.okhttp.Call call = createChildByMovingValidateBeforeCall(repository, node, source, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child by moving. (asynchronously)
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildByMovingAsync(String repository, String node, String source, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildByMovingValidateBeforeCall(repository, node, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createForkOfNode
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createForkOfNodeCall(String repository, String node, String source, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children/_fork"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createForkOfNodeValidateBeforeCall(String repository, String node, String source, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createForkOfNode(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createForkOfNode(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createForkOfNode(Async)");
        }
        
        // verify the required parameter 'withChildren' is set
        if (withChildren == null) {
            throw new ApiException("Missing the required parameter 'withChildren' when calling createForkOfNode(Async)");
        }
        

        com.squareup.okhttp.Call call = createForkOfNodeCall(repository, node, source, withChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a copy of a node by creating a forked version (variant).
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createForkOfNode(String repository, String node, String source, Boolean withChildren) throws ApiException {
        ApiResponse<NodeEntry> resp = createForkOfNodeWithHttpInfo(repository, node, source, withChildren);
        return resp.getData();
    }

    /**
     * Create a copy of a node by creating a forked version (variant).
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createForkOfNodeWithHttpInfo(String repository, String node, String source, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = createForkOfNodeValidateBeforeCall(repository, node, source, withChildren, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a copy of a node by creating a forked version (variant). (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createForkOfNodeAsync(String repository, String node, String source, Boolean withChildren, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createForkOfNodeValidateBeforeCall(repository, node, source, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createShare
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password password for this share, use none to not use a password (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createShareCall(String repository, String node, Long expiryDate, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/shares"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expiryDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiryDate", expiryDate));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createShareValidateBeforeCall(String repository, String node, Long expiryDate, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createShare(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createShare(Async)");
        }
        

        com.squareup.okhttp.Call call = createShareCall(repository, node, expiryDate, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a share for a node.
     * Create a new share for a node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password password for this share, use none to not use a password (optional)
     * @return NodeShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeShare createShare(String repository, String node, Long expiryDate, String password) throws ApiException {
        ApiResponse<NodeShare> resp = createShareWithHttpInfo(repository, node, expiryDate, password);
        return resp.getData();
    }

    /**
     * Create a share for a node.
     * Create a new share for a node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password password for this share, use none to not use a password (optional)
     * @return ApiResponse&lt;NodeShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeShare> createShareWithHttpInfo(String repository, String node, Long expiryDate, String password) throws ApiException {
        com.squareup.okhttp.Call call = createShareValidateBeforeCall(repository, node, expiryDate, password, null, null);
        Type localVarReturnType = new TypeToken<NodeShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a share for a node. (asynchronously)
     * Create a new share for a node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password password for this share, use none to not use a password (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createShareAsync(String repository, String node, Long expiryDate, String password, final ApiCallback<NodeShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createShareValidateBeforeCall(repository, node, expiryDate, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for delete
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param recycle move the node to recycle (optional, default to true)
     * @param protocol protocol (optional)
     * @param store store (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(String repository, String node, Boolean recycle, String protocol, String store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recycle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recycle", recycle));
        if (protocol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocol", protocol));
        if (store != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("store", store));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(String repository, String node, Boolean recycle, String protocol, String store, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling delete(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling delete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCall(repository, node, recycle, protocol, store, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete node.
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param recycle move the node to recycle (optional, default to true)
     * @param protocol protocol (optional)
     * @param store store (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String repository, String node, Boolean recycle, String protocol, String store) throws ApiException {
        deleteWithHttpInfo(repository, node, recycle, protocol, store);
    }

    /**
     * Delete node.
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param recycle move the node to recycle (optional, default to true)
     * @param protocol protocol (optional)
     * @param store store (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String repository, String node, Boolean recycle, String protocol, String store) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(repository, node, recycle, protocol, store, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete node. (asynchronously)
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param recycle move the node to recycle (optional, default to true)
     * @param protocol protocol (optional)
     * @param store store (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String repository, String node, Boolean recycle, String protocol, String store, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(repository, node, recycle, protocol, store, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePreview
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePreviewCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/preview"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePreviewValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deletePreview(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling deletePreview(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePreviewCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete preview of node.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry deletePreview(String repository, String node) throws ApiException {
        ApiResponse<NodeEntry> resp = deletePreviewWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Delete preview of node.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> deletePreviewWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = deletePreviewValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete preview of node. (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePreviewAsync(String repository, String node, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePreviewValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAssocs
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param direction Either where the given node should be the \&quot;SOURCE\&quot; or the \&quot;TARGET\&quot; (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Association name (e.g. ccm:forkio). (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAssocsCall(String repository, String node, String direction, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/assocs"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (assocName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assocName", assocName));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssocsValidateBeforeCall(String repository, String node, String direction, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getAssocs(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getAssocs(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling getAssocs(Async)");
        }
        

        com.squareup.okhttp.Call call = getAssocsCall(repository, node, direction, maxItems, skipCount, sortProperties, sortAscending, assocName, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get related nodes.
     * Get nodes related based on an assoc.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param direction Either where the given node should be the \&quot;SOURCE\&quot; or the \&quot;TARGET\&quot; (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Association name (e.g. ccm:forkio). (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return NodeEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntries getAssocs(String repository, String node, String direction, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter) throws ApiException {
        ApiResponse<NodeEntries> resp = getAssocsWithHttpInfo(repository, node, direction, maxItems, skipCount, sortProperties, sortAscending, assocName, propertyFilter);
        return resp.getData();
    }

    /**
     * Get related nodes.
     * Get nodes related based on an assoc.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param direction Either where the given node should be the \&quot;SOURCE\&quot; or the \&quot;TARGET\&quot; (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Association name (e.g. ccm:forkio). (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;NodeEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntries> getAssocsWithHttpInfo(String repository, String node, String direction, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getAssocsValidateBeforeCall(repository, node, direction, maxItems, skipCount, sortProperties, sortAscending, assocName, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get related nodes. (asynchronously)
     * Get nodes related based on an assoc.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param direction Either where the given node should be the \&quot;SOURCE\&quot; or the \&quot;TARGET\&quot; (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Association name (e.g. ccm:forkio). (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssocsAsync(String repository, String node, String direction, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ApiCallback<NodeEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAssocsValidateBeforeCall(repository, node, direction, maxItems, skipCount, sortProperties, sortAscending, assocName, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChildren
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (or \&quot;-userhome-\&quot; for home directory of current user, \&quot;-shared_files-\&quot; for shared folders, \&quot;-to_me_shared_files\&quot; for shared files for the user,\&quot;-my_shared_files-\&quot; for files shared by the user, \&quot;-inbox-\&quot; for the inbox, \&quot;-workflow_receive-\&quot; for files assigned by workflow, \&quot;-saved_search-\&quot; for saved searches of the user) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param filter filter by type files,folders (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Filter for a specific association. May be empty (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChildrenCall(String repository, String node, Integer maxItems, Integer skipCount, List<String> filter, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "filter", filter));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (assocName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assocName", assocName));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChildrenValidateBeforeCall(String repository, String node, Integer maxItems, Integer skipCount, List<String> filter, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getChildren(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = getChildrenCall(repository, node, maxItems, skipCount, filter, sortProperties, sortAscending, assocName, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get children of node.
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (or \&quot;-userhome-\&quot; for home directory of current user, \&quot;-shared_files-\&quot; for shared folders, \&quot;-to_me_shared_files\&quot; for shared files for the user,\&quot;-my_shared_files-\&quot; for files shared by the user, \&quot;-inbox-\&quot; for the inbox, \&quot;-workflow_receive-\&quot; for files assigned by workflow, \&quot;-saved_search-\&quot; for saved searches of the user) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param filter filter by type files,folders (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Filter for a specific association. May be empty (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return NodeEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntries getChildren(String repository, String node, Integer maxItems, Integer skipCount, List<String> filter, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter) throws ApiException {
        ApiResponse<NodeEntries> resp = getChildrenWithHttpInfo(repository, node, maxItems, skipCount, filter, sortProperties, sortAscending, assocName, propertyFilter);
        return resp.getData();
    }

    /**
     * Get children of node.
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (or \&quot;-userhome-\&quot; for home directory of current user, \&quot;-shared_files-\&quot; for shared folders, \&quot;-to_me_shared_files\&quot; for shared files for the user,\&quot;-my_shared_files-\&quot; for files shared by the user, \&quot;-inbox-\&quot; for the inbox, \&quot;-workflow_receive-\&quot; for files assigned by workflow, \&quot;-saved_search-\&quot; for saved searches of the user) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param filter filter by type files,folders (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Filter for a specific association. May be empty (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;NodeEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntries> getChildrenWithHttpInfo(String repository, String node, Integer maxItems, Integer skipCount, List<String> filter, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getChildrenValidateBeforeCall(repository, node, maxItems, skipCount, filter, sortProperties, sortAscending, assocName, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get children of node. (asynchronously)
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (or \&quot;-userhome-\&quot; for home directory of current user, \&quot;-shared_files-\&quot; for shared folders, \&quot;-to_me_shared_files\&quot; for shared files for the user,\&quot;-my_shared_files-\&quot; for files shared by the user, \&quot;-inbox-\&quot; for the inbox, \&quot;-workflow_receive-\&quot; for files assigned by workflow, \&quot;-saved_search-\&quot; for saved searches of the user) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param filter filter by type files,folders (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param assocName Filter for a specific association. May be empty (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChildrenAsync(String repository, String node, Integer maxItems, Integer skipCount, List<String> filter, List<String> sortProperties, List<Boolean> sortAscending, String assocName, List<String> propertyFilter, final ApiCallback<NodeEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChildrenValidateBeforeCall(repository, node, maxItems, skipCount, filter, sortProperties, sortAscending, assocName, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMetadata
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMetadataCall(String repository, String node, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetadataValidateBeforeCall(String repository, String node, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getMetadataCall(repository, node, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metadata of node.
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getMetadata(String repository, String node, List<String> propertyFilter) throws ApiException {
        ApiResponse<NodeEntry> resp = getMetadataWithHttpInfo(repository, node, propertyFilter);
        return resp.getData();
    }

    /**
     * Get metadata of node.
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getMetadataWithHttpInfo(String repository, String node, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataValidateBeforeCall(repository, node, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of node. (asynchronously)
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataAsync(String repository, String node, List<String> propertyFilter, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataValidateBeforeCall(repository, node, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodes
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodesCall(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (facettes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "facettes", facettes));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodesValidateBeforeCall(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNodes(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getNodes(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodesCall(repository, query, facettes, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searching nodes.
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResult getNodes(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResult> resp = getNodesWithHttpInfo(repository, query, facettes, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Searching nodes.
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResult> getNodesWithHttpInfo(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getNodesValidateBeforeCall(repository, query, facettes, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searching nodes. (asynchronously)
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodesAsync(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodesValidateBeforeCall(repository, query, facettes, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNotifyList
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotifyListCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/notifys"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNotifyListValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNotifyList(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getNotifyList(Async)");
        }
        

        com.squareup.okhttp.Call call = getNotifyListCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get notifys (sharing history) of the node.
     * Ordered by the time of each notify
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return List&lt;NotifyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NotifyEntry> getNotifyList(String repository, String node) throws ApiException {
        ApiResponse<List<NotifyEntry>> resp = getNotifyListWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get notifys (sharing history) of the node.
     * Ordered by the time of each notify
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;List&lt;NotifyEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NotifyEntry>> getNotifyListWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getNotifyListValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<List<NotifyEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notifys (sharing history) of the node. (asynchronously)
     * Ordered by the time of each notify
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotifyListAsync(String repository, String node, final ApiCallback<List<NotifyEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotifyListValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NotifyEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParents
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param fullPath activate to return the full alfresco path, otherwise the path for the user home is resolved (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParentsCall(String repository, String node, List<String> propertyFilter, Boolean fullPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/parents"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));
        if (fullPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fullPath", fullPath));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParentsValidateBeforeCall(String repository, String node, List<String> propertyFilter, Boolean fullPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getParents(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getParents(Async)");
        }
        

        com.squareup.okhttp.Call call = getParentsCall(repository, node, propertyFilter, fullPath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get parents of node.
     * Get all parents metadata + own metadata of node. Index 0 is always the current node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param fullPath activate to return the full alfresco path, otherwise the path for the user home is resolved (optional)
     * @return ParentEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParentEntries getParents(String repository, String node, List<String> propertyFilter, Boolean fullPath) throws ApiException {
        ApiResponse<ParentEntries> resp = getParentsWithHttpInfo(repository, node, propertyFilter, fullPath);
        return resp.getData();
    }

    /**
     * Get parents of node.
     * Get all parents metadata + own metadata of node. Index 0 is always the current node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param fullPath activate to return the full alfresco path, otherwise the path for the user home is resolved (optional)
     * @return ApiResponse&lt;ParentEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParentEntries> getParentsWithHttpInfo(String repository, String node, List<String> propertyFilter, Boolean fullPath) throws ApiException {
        com.squareup.okhttp.Call call = getParentsValidateBeforeCall(repository, node, propertyFilter, fullPath, null, null);
        Type localVarReturnType = new TypeToken<ParentEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get parents of node. (asynchronously)
     * Get all parents metadata + own metadata of node. Index 0 is always the current node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param fullPath activate to return the full alfresco path, otherwise the path for the user home is resolved (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParentsAsync(String repository, String node, List<String> propertyFilter, Boolean fullPath, final ApiCallback<ParentEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParentsValidateBeforeCall(repository, node, propertyFilter, fullPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParentEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPermission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPermissionCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/permissions"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPermissionValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getPermission(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = getPermissionCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all permission of node.
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodePermissionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodePermissionEntry getPermission(String repository, String node) throws ApiException {
        ApiResponse<NodePermissionEntry> resp = getPermissionWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get all permission of node.
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodePermissionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodePermissionEntry> getPermissionWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getPermissionValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodePermissionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all permission of node. (asynchronously)
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPermissionAsync(String repository, String node, final ApiCallback<NodePermissionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPermissionValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodePermissionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShares
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param email Filter for a specific email or use LINK for link shares (Optional) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSharesCall(String repository, String node, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/shares"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSharesValidateBeforeCall(String repository, String node, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getShares(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getShares(Async)");
        }
        

        com.squareup.okhttp.Call call = getSharesCall(repository, node, email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get shares of node.
     * Get list of shares (via mail/token) for a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param email Filter for a specific email or use LINK for link shares (Optional) (optional)
     * @return List&lt;NodeShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NodeShare> getShares(String repository, String node, String email) throws ApiException {
        ApiResponse<List<NodeShare>> resp = getSharesWithHttpInfo(repository, node, email);
        return resp.getData();
    }

    /**
     * Get shares of node.
     * Get list of shares (via mail/token) for a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param email Filter for a specific email or use LINK for link shares (Optional) (optional)
     * @return ApiResponse&lt;List&lt;NodeShare&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NodeShare>> getSharesWithHttpInfo(String repository, String node, String email) throws ApiException {
        com.squareup.okhttp.Call call = getSharesValidateBeforeCall(repository, node, email, null, null);
        Type localVarReturnType = new TypeToken<List<NodeShare>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get shares of node. (asynchronously)
     * Get list of shares (via mail/token) for a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param email Filter for a specific email or use LINK for link shares (Optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSharesAsync(String repository, String node, String email, final ApiCallback<List<NodeShare>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSharesValidateBeforeCall(repository, node, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NodeShare>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplateMetadata
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplateMetadataCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata/template"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplateMetadataValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getTemplateMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getTemplateMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getTemplateMetadataCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the metadata template + status for this folder.
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getTemplateMetadata(String repository, String node) throws ApiException {
        ApiResponse<NodeEntry> resp = getTemplateMetadataWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get the metadata template + status for this folder.
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getTemplateMetadataWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getTemplateMetadataValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the metadata template + status for this folder. (asynchronously)
     * All the given metadata will be inherited to child nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplateMetadataAsync(String repository, String node, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplateMetadataValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTextContent
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTextContentCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/textContent"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTextContentValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getTextContent(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getTextContent(Async)");
        }
        

        com.squareup.okhttp.Call call = getTextContentCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the text content of a document.
     * May fails with 500 if the node can not be read.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeText
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeText getTextContent(String repository, String node) throws ApiException {
        ApiResponse<NodeText> resp = getTextContentWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get the text content of a document.
     * May fails with 500 if the node can not be read.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeText&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeText> getTextContentWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getTextContentValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeText>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the text content of a document. (asynchronously)
     * May fails with 500 if the node can not be read.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTextContentAsync(String repository, String node, final ApiCallback<NodeText> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTextContentValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeText>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersionMetadata
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionMetadataCall(String repository, String node, Integer major, Integer minor, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/metadata"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "major" + "\\}", apiClient.escapeString(major.toString()))
            .replaceAll("\\{" + "minor" + "\\}", apiClient.escapeString(minor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionMetadataValidateBeforeCall(String repository, String node, Integer major, Integer minor, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'major' is set
        if (major == null) {
            throw new ApiException("Missing the required parameter 'major' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'minor' is set
        if (minor == null) {
            throw new ApiException("Missing the required parameter 'minor' when calling getVersionMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getVersionMetadataCall(repository, node, major, minor, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get metadata of node version.
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return NodeVersionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeVersionEntry getVersionMetadata(String repository, String node, Integer major, Integer minor, List<String> propertyFilter) throws ApiException {
        ApiResponse<NodeVersionEntry> resp = getVersionMetadataWithHttpInfo(repository, node, major, minor, propertyFilter);
        return resp.getData();
    }

    /**
     * Get metadata of node version.
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;NodeVersionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeVersionEntry> getVersionMetadataWithHttpInfo(String repository, String node, Integer major, Integer minor, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getVersionMetadataValidateBeforeCall(repository, node, major, minor, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<NodeVersionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of node version. (asynchronously)
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionMetadataAsync(String repository, String node, Integer major, Integer minor, List<String> propertyFilter, final ApiCallback<NodeVersionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionMetadataValidateBeforeCall(repository, node, major, minor, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeVersionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersions
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionsCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getVersions(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getVersionsCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all versions of node.
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeVersionRefEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeVersionRefEntries getVersions(String repository, String node) throws ApiException {
        ApiResponse<NodeVersionRefEntries> resp = getVersionsWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get all versions of node.
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeVersionRefEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeVersionRefEntries> getVersionsWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeVersionRefEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versions of node. (asynchronously)
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsAsync(String repository, String node, final ApiCallback<NodeVersionRefEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeVersionRefEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWorkflowHistory
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWorkflowHistoryCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/workflow"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWorkflowHistoryValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getWorkflowHistory(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getWorkflowHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = getWorkflowHistoryCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get workflow history.
     * Get workflow history of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return List&lt;WorkflowHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WorkflowHistory> getWorkflowHistory(String repository, String node) throws ApiException {
        ApiResponse<List<WorkflowHistory>> resp = getWorkflowHistoryWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get workflow history.
     * Get workflow history of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;List&lt;WorkflowHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WorkflowHistory>> getWorkflowHistoryWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getWorkflowHistoryValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<List<WorkflowHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get workflow history. (asynchronously)
     * Get workflow history of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWorkflowHistoryAsync(String repository, String node, final ApiCallback<List<WorkflowHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWorkflowHistoryValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WorkflowHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hasPermission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param user Authority (user/group) to check (use \&quot;-me-\&quot; for current user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hasPermissionCall(String repository, String node, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/permissions/{user}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "user" + "\\}", apiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hasPermissionValidateBeforeCall(String repository, String node, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling hasPermission(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling hasPermission(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling hasPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = hasPermissionCall(repository, node, user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Which permissions has user/group for node.
     * Check for actual permissions (also when user is in groups) for a specific node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param user Authority (user/group) to check (use \&quot;-me-\&quot; for current user (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> hasPermission(String repository, String node, String user) throws ApiException {
        ApiResponse<List<String>> resp = hasPermissionWithHttpInfo(repository, node, user);
        return resp.getData();
    }

    /**
     * Which permissions has user/group for node.
     * Check for actual permissions (also when user is in groups) for a specific node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param user Authority (user/group) to check (use \&quot;-me-\&quot; for current user (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> hasPermissionWithHttpInfo(String repository, String node, String user) throws ApiException {
        com.squareup.okhttp.Call call = hasPermissionValidateBeforeCall(repository, node, user, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Which permissions has user/group for node. (asynchronously)
     * Check for actual permissions (also when user is in groups) for a specific node
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param user Authority (user/group) to check (use \&quot;-me-\&quot; for current user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hasPermissionAsync(String repository, String node, String user, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hasPermissionValidateBeforeCall(repository, node, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importNode
     * @param repository The id of the foreign repository (required)
     * @param node ID of node (required)
     * @param parent Parent node where to store it locally, may also use -userhome- or -inbox- (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importNodeCall(String repository, String node, String parent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/import"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent", parent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importNodeValidateBeforeCall(String repository, String node, String parent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling importNode(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling importNode(Async)");
        }
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling importNode(Async)");
        }
        

        com.squareup.okhttp.Call call = importNodeCall(repository, node, parent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import node
     * Import a node from a foreign repository to the local repository.
     * @param repository The id of the foreign repository (required)
     * @param node ID of node (required)
     * @param parent Parent node where to store it locally, may also use -userhome- or -inbox- (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry importNode(String repository, String node, String parent) throws ApiException {
        ApiResponse<NodeEntry> resp = importNodeWithHttpInfo(repository, node, parent);
        return resp.getData();
    }

    /**
     * Import node
     * Import a node from a foreign repository to the local repository.
     * @param repository The id of the foreign repository (required)
     * @param node ID of node (required)
     * @param parent Parent node where to store it locally, may also use -userhome- or -inbox- (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> importNodeWithHttpInfo(String repository, String node, String parent) throws ApiException {
        com.squareup.okhttp.Call call = importNodeValidateBeforeCall(repository, node, parent, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import node (asynchronously)
     * Import a node from a foreign repository to the local repository.
     * @param repository The id of the foreign repository (required)
     * @param node ID of node (required)
     * @param parent Parent node where to store it locally, may also use -userhome- or -inbox- (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importNodeAsync(String repository, String node, String parent, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importNodeValidateBeforeCall(repository, node, parent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for islocked
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call islockedCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/lock/status"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call islockedValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling islocked(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling islocked(Async)");
        }
        

        com.squareup.okhttp.Call call = islockedCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * locked status of a node.
     * locked status of a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeLocked
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeLocked islocked(String repository, String node) throws ApiException {
        ApiResponse<NodeLocked> resp = islockedWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * locked status of a node.
     * locked status of a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeLocked&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeLocked> islockedWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = islockedValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeLocked>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * locked status of a node. (asynchronously)
     * locked status of a node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call islockedAsync(String repository, String node, final ApiCallback<NodeLocked> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = islockedValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeLocked>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for prepareUsage
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call prepareUsageCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/prepareUsage"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call prepareUsageValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling prepareUsage(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling prepareUsage(Async)");
        }
        

        com.squareup.okhttp.Call call = prepareUsageCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create remote object and get properties.
     * create remote object and get properties.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeRemote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRemote prepareUsage(String repository, String node) throws ApiException {
        ApiResponse<NodeRemote> resp = prepareUsageWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * create remote object and get properties.
     * create remote object and get properties.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeRemote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRemote> prepareUsageWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = prepareUsageValidateBeforeCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeRemote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create remote object and get properties. (asynchronously)
     * create remote object and get properties.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call prepareUsageAsync(String repository, String node, final ApiCallback<NodeRemote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = prepareUsageValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRemote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeShare
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeShareCall(String repository, String node, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/shares/{shareId}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeShareValidateBeforeCall(String repository, String node, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling removeShare(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling removeShare(Async)");
        }
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling removeShare(Async)");
        }
        

        com.squareup.okhttp.Call call = removeShareCall(repository, node, shareId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove share of a node.
     * Remove the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeShare(String repository, String node, String shareId) throws ApiException {
        removeShareWithHttpInfo(repository, node, shareId);
    }

    /**
     * Remove share of a node.
     * Remove the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeShareWithHttpInfo(String repository, String node, String shareId) throws ApiException {
        com.squareup.okhttp.Call call = removeShareValidateBeforeCall(repository, node, shareId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove share of a node. (asynchronously)
     * Remove the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeShareAsync(String repository, String node, String shareId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeShareValidateBeforeCall(repository, node, shareId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reportNode
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param reason the reason for the report (required)
     * @param userEmail mail of reporting user (required)
     * @param userComment additional user comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reportNodeCall(String repository, String node, String reason, String userEmail, String userComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/report"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reason", reason));
        if (userEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userEmail", userEmail));
        if (userComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userComment", userComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reportNodeValidateBeforeCall(String repository, String node, String reason, String userEmail, String userComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling reportNode(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling reportNode(Async)");
        }
        
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling reportNode(Async)");
        }
        
        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling reportNode(Async)");
        }
        

        com.squareup.okhttp.Call call = reportNodeCall(repository, node, reason, userEmail, userComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Report the node.
     * Report a node to notify the admin about an issue)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param reason the reason for the report (required)
     * @param userEmail mail of reporting user (required)
     * @param userComment additional user comment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reportNode(String repository, String node, String reason, String userEmail, String userComment) throws ApiException {
        reportNodeWithHttpInfo(repository, node, reason, userEmail, userComment);
    }

    /**
     * Report the node.
     * Report a node to notify the admin about an issue)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param reason the reason for the report (required)
     * @param userEmail mail of reporting user (required)
     * @param userComment additional user comment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reportNodeWithHttpInfo(String repository, String node, String reason, String userEmail, String userComment) throws ApiException {
        com.squareup.okhttp.Call call = reportNodeValidateBeforeCall(repository, node, reason, userEmail, userComment, null, null);
        return apiClient.execute(call);
    }

    /**
     * Report the node. (asynchronously)
     * Report a node to notify the admin about an issue)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param reason the reason for the report (required)
     * @param userEmail mail of reporting user (required)
     * @param userComment additional user comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reportNodeAsync(String repository, String node, String reason, String userEmail, String userComment, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reportNodeValidateBeforeCall(repository, node, reason, userEmail, userComment, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for revertVersion
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revertVersionCall(String repository, String node, Integer major, Integer minor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/_revert"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "major" + "\\}", apiClient.escapeString(major.toString()))
            .replaceAll("\\{" + "minor" + "\\}", apiClient.escapeString(minor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revertVersionValidateBeforeCall(String repository, String node, Integer major, Integer minor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'major' is set
        if (major == null) {
            throw new ApiException("Missing the required parameter 'major' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'minor' is set
        if (minor == null) {
            throw new ApiException("Missing the required parameter 'minor' when calling revertVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = revertVersionCall(repository, node, major, minor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Revert to node version.
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry revertVersion(String repository, String node, Integer major, Integer minor) throws ApiException {
        ApiResponse<NodeEntry> resp = revertVersionWithHttpInfo(repository, node, major, minor);
        return resp.getData();
    }

    /**
     * Revert to node version.
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> revertVersionWithHttpInfo(String repository, String node, Integer major, Integer minor) throws ApiException {
        com.squareup.okhttp.Call call = revertVersionValidateBeforeCall(repository, node, major, minor, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Revert to node version. (asynchronously)
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revertVersionAsync(String repository, String node, Integer major, Integer minor, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revertVersionValidateBeforeCall(repository, node, major, minor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setOwner
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param username username (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setOwnerCall(String repository, String node, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/owner"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setOwnerValidateBeforeCall(String repository, String node, String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setOwner(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling setOwner(Async)");
        }
        

        com.squareup.okhttp.Call call = setOwnerCall(repository, node, username, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set owner of node.
     * Set owner of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param username username (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setOwner(String repository, String node, String username) throws ApiException {
        setOwnerWithHttpInfo(repository, node, username);
    }

    /**
     * Set owner of node.
     * Set owner of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param username username (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setOwnerWithHttpInfo(String repository, String node, String username) throws ApiException {
        com.squareup.okhttp.Call call = setOwnerValidateBeforeCall(repository, node, username, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set owner of node. (asynchronously)
     * Set owner of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param username username (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setOwnerAsync(String repository, String node, String username, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setOwnerValidateBeforeCall(repository, node, username, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setPermission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @param sendMail sendMail (required)
     * @param sendCopy sendCopy (required)
     * @param mailtext mailtext (optional)
     * @param createHandle createHandle (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPermissionCall(String repository, String node, ACL body, Boolean sendMail, Boolean sendCopy, String mailtext, Boolean createHandle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/permissions"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mailtext != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mailtext", mailtext));
        if (sendMail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendMail", sendMail));
        if (sendCopy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendCopy", sendCopy));
        if (createHandle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createHandle", createHandle));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPermissionValidateBeforeCall(String repository, String node, ACL body, Boolean sendMail, Boolean sendCopy, String mailtext, Boolean createHandle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'sendMail' is set
        if (sendMail == null) {
            throw new ApiException("Missing the required parameter 'sendMail' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'sendCopy' is set
        if (sendCopy == null) {
            throw new ApiException("Missing the required parameter 'sendCopy' when calling setPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = setPermissionCall(repository, node, body, sendMail, sendCopy, mailtext, createHandle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set local permissions of node.
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @param sendMail sendMail (required)
     * @param sendCopy sendCopy (required)
     * @param mailtext mailtext (optional)
     * @param createHandle createHandle (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPermission(String repository, String node, ACL body, Boolean sendMail, Boolean sendCopy, String mailtext, Boolean createHandle) throws ApiException {
        setPermissionWithHttpInfo(repository, node, body, sendMail, sendCopy, mailtext, createHandle);
    }

    /**
     * Set local permissions of node.
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @param sendMail sendMail (required)
     * @param sendCopy sendCopy (required)
     * @param mailtext mailtext (optional)
     * @param createHandle createHandle (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPermissionWithHttpInfo(String repository, String node, ACL body, Boolean sendMail, Boolean sendCopy, String mailtext, Boolean createHandle) throws ApiException {
        com.squareup.okhttp.Call call = setPermissionValidateBeforeCall(repository, node, body, sendMail, sendCopy, mailtext, createHandle, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set local permissions of node. (asynchronously)
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @param sendMail sendMail (required)
     * @param sendCopy sendCopy (required)
     * @param mailtext mailtext (optional)
     * @param createHandle createHandle (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPermissionAsync(String repository, String node, ACL body, Boolean sendMail, Boolean sendCopy, String mailtext, Boolean createHandle, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPermissionValidateBeforeCall(repository, node, body, sendMail, sendCopy, mailtext, createHandle, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setProperty
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param property property (required)
     * @param value value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPropertyCall(String repository, String node, String property, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/property"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (property != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property", property));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPropertyValidateBeforeCall(String repository, String node, String property, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setProperty(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling setProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling setProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = setPropertyCall(repository, node, property, value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set single property of node.
     * When the property is unset (null), it will be removed
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param property property (required)
     * @param value value (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setProperty(String repository, String node, String property, String value) throws ApiException {
        setPropertyWithHttpInfo(repository, node, property, value);
    }

    /**
     * Set single property of node.
     * When the property is unset (null), it will be removed
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param property property (required)
     * @param value value (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPropertyWithHttpInfo(String repository, String node, String property, String value) throws ApiException {
        com.squareup.okhttp.Call call = setPropertyValidateBeforeCall(repository, node, property, value, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set single property of node. (asynchronously)
     * When the property is unset (null), it will be removed
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param property property (required)
     * @param value value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPropertyAsync(String repository, String node, String property, String value, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPropertyValidateBeforeCall(repository, node, property, value, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for storeXApiData
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body xApi conform json data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storeXApiDataCall(String repository, String node, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/xapi"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storeXApiDataValidateBeforeCall(String repository, String node, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling storeXApiData(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling storeXApiData(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling storeXApiData(Async)");
        }
        

        com.squareup.okhttp.Call call = storeXApiDataCall(repository, node, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Store xApi-Conform data for a given node
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body xApi conform json data (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object storeXApiData(String repository, String node, String body) throws ApiException {
        ApiResponse<Object> resp = storeXApiDataWithHttpInfo(repository, node, body);
        return resp.getData();
    }

    /**
     * Store xApi-Conform data for a given node
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body xApi conform json data (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> storeXApiDataWithHttpInfo(String repository, String node, String body) throws ApiException {
        com.squareup.okhttp.Call call = storeXApiDataValidateBeforeCall(repository, node, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Store xApi-Conform data for a given node (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body xApi conform json data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storeXApiDataAsync(String repository, String node, String body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storeXApiDataValidateBeforeCall(repository, node, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unlock
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlockCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/lock/unlock"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlockValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling unlock(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling unlock(Async)");
        }
        

        com.squareup.okhttp.Call call = unlockCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * unlock node.
     * unlock node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unlock(String repository, String node) throws ApiException {
        unlockWithHttpInfo(repository, node);
    }

    /**
     * unlock node.
     * unlock node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unlockWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = unlockValidateBeforeCall(repository, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * unlock node. (asynchronously)
     * unlock node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlockAsync(String repository, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlockValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateShare
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password new password for share, leave empty if you don&#39;t want to change it (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateShareCall(String repository, String node, String shareId, Long expiryDate, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/shares/{shareId}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expiryDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiryDate", expiryDate));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateShareValidateBeforeCall(String repository, String node, String shareId, Long expiryDate, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updateShare(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling updateShare(Async)");
        }
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling updateShare(Async)");
        }
        

        com.squareup.okhttp.Call call = updateShareCall(repository, node, shareId, expiryDate, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * update share of a node.
     * update the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password new password for share, leave empty if you don&#39;t want to change it (optional)
     * @return NodeShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeShare updateShare(String repository, String node, String shareId, Long expiryDate, String password) throws ApiException {
        ApiResponse<NodeShare> resp = updateShareWithHttpInfo(repository, node, shareId, expiryDate, password);
        return resp.getData();
    }

    /**
     * update share of a node.
     * update the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password new password for share, leave empty if you don&#39;t want to change it (optional)
     * @return ApiResponse&lt;NodeShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeShare> updateShareWithHttpInfo(String repository, String node, String shareId, Long expiryDate, String password) throws ApiException {
        com.squareup.okhttp.Call call = updateShareValidateBeforeCall(repository, node, shareId, expiryDate, password, null, null);
        Type localVarReturnType = new TypeToken<NodeShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update share of a node. (asynchronously)
     * update the specified share id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param shareId share id (required)
     * @param expiryDate expiry date for this share, leave empty or -1 for unlimited (optional, default to -1)
     * @param password new password for share, leave empty if you don&#39;t want to change it (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateShareAsync(String repository, String node, String shareId, Long expiryDate, String password, final ApiCallback<NodeShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateShareValidateBeforeCall(repository, node, shareId, expiryDate, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
