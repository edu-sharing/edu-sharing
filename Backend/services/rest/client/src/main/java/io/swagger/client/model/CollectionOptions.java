/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CollectionOptions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class CollectionOptions {
  /**
   * Gets or Sets privateCollections
   */
  @JsonAdapter(PrivateCollectionsEnum.Adapter.class)
  public enum PrivateCollectionsEnum {
    NONE("none"),
    
    ASSIGN("assign"),
    
    DELETE("delete");

    private String value;

    PrivateCollectionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateCollectionsEnum fromValue(String text) {
      for (PrivateCollectionsEnum b : PrivateCollectionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrivateCollectionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateCollectionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateCollectionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrivateCollectionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("privateCollections")
  private PrivateCollectionsEnum privateCollections = null;

  /**
   * Gets or Sets publicCollections
   */
  @JsonAdapter(PublicCollectionsEnum.Adapter.class)
  public enum PublicCollectionsEnum {
    NONE("none"),
    
    ASSIGN("assign"),
    
    DELETE("delete");

    private String value;

    PublicCollectionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicCollectionsEnum fromValue(String text) {
      for (PublicCollectionsEnum b : PublicCollectionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PublicCollectionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicCollectionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicCollectionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PublicCollectionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("publicCollections")
  private PublicCollectionsEnum publicCollections = null;

  public CollectionOptions privateCollections(PrivateCollectionsEnum privateCollections) {
    this.privateCollections = privateCollections;
    return this;
  }

   /**
   * Get privateCollections
   * @return privateCollections
  **/
  @ApiModelProperty(value = "")
  public PrivateCollectionsEnum getPrivateCollections() {
    return privateCollections;
  }

  public void setPrivateCollections(PrivateCollectionsEnum privateCollections) {
    this.privateCollections = privateCollections;
  }

  public CollectionOptions publicCollections(PublicCollectionsEnum publicCollections) {
    this.publicCollections = publicCollections;
    return this;
  }

   /**
   * Get publicCollections
   * @return publicCollections
  **/
  @ApiModelProperty(value = "")
  public PublicCollectionsEnum getPublicCollections() {
    return publicCollections;
  }

  public void setPublicCollections(PublicCollectionsEnum publicCollections) {
    this.publicCollections = publicCollections;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionOptions collectionOptions = (CollectionOptions) o;
    return Objects.equals(this.privateCollections, collectionOptions.privateCollections) &&
        Objects.equals(this.publicCollections, collectionOptions.publicCollections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateCollections, publicCollections);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionOptions {\n");
    
    sb.append("    privateCollections: ").append(toIndentedString(privateCollections)).append("\n");
    sb.append("    publicCollections: ").append(toIndentedString(publicCollections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

