/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CollectionEntries;
import io.swagger.client.model.CollectionEntry;
import io.swagger.client.model.CollectionFeedback;
import io.swagger.client.model.ErrorResponse;
import java.io.File;
import io.swagger.client.model.Node;
import io.swagger.client.model.NodeEntry;
import io.swagger.client.model.ReferenceEntries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionV1Api {
    private ApiClient apiClient;

    public CollectionV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFeedbackToCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFeedbackToCollectionCall(String repository, String collection, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/feedback"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFeedbackToCollectionValidateBeforeCall(String repository, String collection, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addFeedbackToCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling addFeedbackToCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = addFeedbackToCollectionCall(repository, collection, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post feedback to collection.
     * Requires permission \&quot;Feedback\&quot; on the specific collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFeedbackToCollection(String repository, String collection, Object body) throws ApiException {
        addFeedbackToCollectionWithHttpInfo(repository, collection, body);
    }

    /**
     * Post feedback to collection.
     * Requires permission \&quot;Feedback\&quot; on the specific collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFeedbackToCollectionWithHttpInfo(String repository, String collection, Object body) throws ApiException {
        com.squareup.okhttp.Call call = addFeedbackToCollectionValidateBeforeCall(repository, collection, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post feedback to collection. (asynchronously)
     * Requires permission \&quot;Feedback\&quot; on the specific collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFeedbackToCollectionAsync(String repository, String collection, Object body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFeedbackToCollectionValidateBeforeCall(repository, collection, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addToCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param sourceRepo ID of source repository (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addToCollectionCall(String repository, String collection, String node, String sourceRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/references/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceRepo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceRepo", sourceRepo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addToCollectionValidateBeforeCall(String repository, String collection, String node, String sourceRepo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addToCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling addToCollection(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addToCollection(Async)");
        }
        
        // verify the required parameter 'sourceRepo' is set
        if (sourceRepo == null) {
            throw new ApiException("Missing the required parameter 'sourceRepo' when calling addToCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = addToCollectionCall(repository, collection, node, sourceRepo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a node to a collection.
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param sourceRepo ID of source repository (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry addToCollection(String repository, String collection, String node, String sourceRepo) throws ApiException {
        ApiResponse<NodeEntry> resp = addToCollectionWithHttpInfo(repository, collection, node, sourceRepo);
        return resp.getData();
    }

    /**
     * Add a node to a collection.
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param sourceRepo ID of source repository (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> addToCollectionWithHttpInfo(String repository, String collection, String node, String sourceRepo) throws ApiException {
        com.squareup.okhttp.Call call = addToCollectionValidateBeforeCall(repository, collection, node, sourceRepo, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a node to a collection. (asynchronously)
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param sourceRepo ID of source repository (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addToCollectionAsync(String repository, String collection, String node, String sourceRepo, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addToCollectionValidateBeforeCall(repository, collection, node, sourceRepo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeIconOfCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeIconOfCollectionCall(String repository, String collection, String mimetype, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/icon"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mimetype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mimetype", mimetype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeIconOfCollectionValidateBeforeCall(String repository, String collection, String mimetype, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeIconOfCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling changeIconOfCollection(Async)");
        }
        
        // verify the required parameter 'mimetype' is set
        if (mimetype == null) {
            throw new ApiException("Missing the required parameter 'mimetype' when calling changeIconOfCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = changeIconOfCollectionCall(repository, collection, mimetype, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Writes Preview Image of a collection.
     * Writes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @return CollectionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntry changeIconOfCollection(String repository, String collection, String mimetype, File file) throws ApiException {
        ApiResponse<CollectionEntry> resp = changeIconOfCollectionWithHttpInfo(repository, collection, mimetype, file);
        return resp.getData();
    }

    /**
     * Writes Preview Image of a collection.
     * Writes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @return ApiResponse&lt;CollectionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntry> changeIconOfCollectionWithHttpInfo(String repository, String collection, String mimetype, File file) throws ApiException {
        com.squareup.okhttp.Call call = changeIconOfCollectionValidateBeforeCall(repository, collection, mimetype, file, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Writes Preview Image of a collection. (asynchronously)
     * Writes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeIconOfCollectionAsync(String repository, String collection, String mimetype, File file, final ApiCallback<CollectionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeIconOfCollectionValidateBeforeCall(repository, collection, mimetype, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCollectionCall(String repository, String collection, Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/children"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCollectionValidateBeforeCall(String repository, String collection, Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling createCollection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = createCollectionCall(repository, collection, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new collection.
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @return CollectionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntry createCollection(String repository, String collection, Node body) throws ApiException {
        ApiResponse<CollectionEntry> resp = createCollectionWithHttpInfo(repository, collection, body);
        return resp.getData();
    }

    /**
     * Create a new collection.
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @return ApiResponse&lt;CollectionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntry> createCollectionWithHttpInfo(String repository, String collection, Node body) throws ApiException {
        com.squareup.okhttp.Call call = createCollectionValidateBeforeCall(repository, collection, body, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new collection. (asynchronously)
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCollectionAsync(String repository, String collection, Node body, final ApiCallback<CollectionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCollectionValidateBeforeCall(repository, collection, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCollectionValidateBeforeCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCollectionCall(repository, collection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a collection.
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCollection(String repository, String collection) throws ApiException {
        deleteCollectionWithHttpInfo(repository, collection);
    }

    /**
     * Delete a collection.
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = deleteCollectionValidateBeforeCall(repository, collection, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a collection. (asynchronously)
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCollectionAsync(String repository, String collection, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCollectionValidateBeforeCall(repository, collection, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFromCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFromCollectionCall(String repository, String collection, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/references/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFromCollectionValidateBeforeCall(String repository, String collection, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteFromCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteFromCollection(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling deleteFromCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFromCollectionCall(repository, collection, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a node from a collection.
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFromCollection(String repository, String collection, String node) throws ApiException {
        deleteFromCollectionWithHttpInfo(repository, collection, node);
    }

    /**
     * Delete a node from a collection.
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFromCollectionWithHttpInfo(String repository, String collection, String node) throws ApiException {
        com.squareup.okhttp.Call call = deleteFromCollectionValidateBeforeCall(repository, collection, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node from a collection. (asynchronously)
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFromCollectionAsync(String repository, String collection, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFromCollectionValidateBeforeCall(repository, collection, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCollectionValidateBeforeCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = getCollectionCall(repository, collection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a collection.
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return CollectionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntry getCollection(String repository, String collection) throws ApiException {
        ApiResponse<CollectionEntry> resp = getCollectionWithHttpInfo(repository, collection);
        return resp.getData();
    }

    /**
     * Get a collection.
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;CollectionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntry> getCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = getCollectionValidateBeforeCall(repository, collection, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a collection. (asynchronously)
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollectionAsync(String repository, String collection, final ApiCallback<CollectionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollectionValidateBeforeCall(repository, collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCollectionsReferences
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCollectionsReferencesCall(String repository, String collection, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/children/references"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCollectionsReferencesValidateBeforeCall(String repository, String collection, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getCollectionsReferences(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollectionsReferences(Async)");
        }
        

        com.squareup.okhttp.Call call = getCollectionsReferencesCall(repository, collection, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get references objects for collection.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ReferenceEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferenceEntries getCollectionsReferences(String repository, String collection, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<ReferenceEntries> resp = getCollectionsReferencesWithHttpInfo(repository, collection, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Get references objects for collection.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;ReferenceEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferenceEntries> getCollectionsReferencesWithHttpInfo(String repository, String collection, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getCollectionsReferencesValidateBeforeCall(repository, collection, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<ReferenceEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get references objects for collection. (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollectionsReferencesAsync(String repository, String collection, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<ReferenceEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollectionsReferencesValidateBeforeCall(repository, collection, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReferenceEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCollectionsSubcollections
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (only relevant if parent &#x3D;&#x3D; -root-) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCollectionsSubcollectionsCall(String repository, String collection, String scope, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/children/collections"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCollectionsSubcollectionsValidateBeforeCall(String repository, String collection, String scope, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getCollectionsSubcollections(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollectionsSubcollections(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCollectionsSubcollections(Async)");
        }
        

        com.squareup.okhttp.Call call = getCollectionsSubcollectionsCall(repository, collection, scope, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get child collections for collection (or root).
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (only relevant if parent &#x3D;&#x3D; -root-) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ReferenceEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferenceEntries getCollectionsSubcollections(String repository, String collection, String scope, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<ReferenceEntries> resp = getCollectionsSubcollectionsWithHttpInfo(repository, collection, scope, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Get child collections for collection (or root).
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (only relevant if parent &#x3D;&#x3D; -root-) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;ReferenceEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferenceEntries> getCollectionsSubcollectionsWithHttpInfo(String repository, String collection, String scope, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = getCollectionsSubcollectionsValidateBeforeCall(repository, collection, scope, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<ReferenceEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get child collections for collection (or root). (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (only relevant if parent &#x3D;&#x3D; -root-) (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollectionsSubcollectionsAsync(String repository, String collection, String scope, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<ReferenceEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollectionsSubcollectionsValidateBeforeCall(repository, collection, scope, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReferenceEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeedbackOfCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeedbackOfCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/feedback"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeedbackOfCollectionValidateBeforeCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getFeedbackOfCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getFeedbackOfCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = getFeedbackOfCollectionCall(repository, collection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get feedback of collection.
     * Requires permission \&quot;???\&quot; on the specific permission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return List&lt;CollectionFeedback&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CollectionFeedback> getFeedbackOfCollection(String repository, String collection) throws ApiException {
        ApiResponse<List<CollectionFeedback>> resp = getFeedbackOfCollectionWithHttpInfo(repository, collection);
        return resp.getData();
    }

    /**
     * Get feedback of collection.
     * Requires permission \&quot;???\&quot; on the specific permission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;List&lt;CollectionFeedback&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CollectionFeedback>> getFeedbackOfCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = getFeedbackOfCollectionValidateBeforeCall(repository, collection, null, null);
        Type localVarReturnType = new TypeToken<List<CollectionFeedback>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get feedback of collection. (asynchronously)
     * Requires permission \&quot;???\&quot; on the specific permission
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeedbackOfCollectionAsync(String repository, String collection, final ApiCallback<List<CollectionFeedback>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeedbackOfCollectionValidateBeforeCall(repository, collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CollectionFeedback>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeIconOfCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeIconOfCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/icon"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeIconOfCollectionValidateBeforeCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling removeIconOfCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling removeIconOfCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = removeIconOfCollectionCall(repository, collection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes Preview Image of a collection.
     * Deletes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeIconOfCollection(String repository, String collection) throws ApiException {
        removeIconOfCollectionWithHttpInfo(repository, collection);
    }

    /**
     * Deletes Preview Image of a collection.
     * Deletes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeIconOfCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = removeIconOfCollectionValidateBeforeCall(repository, collection, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes Preview Image of a collection. (asynchronously)
     * Deletes Preview Image of a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeIconOfCollectionAsync(String repository, String collection, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeIconOfCollectionValidateBeforeCall(repository, collection, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for search
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query query string (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(String repository, String query, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/search"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String repository, String query, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling search(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling search(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCall(repository, query, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search collections.
     * Search collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query query string (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return CollectionEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntries search(String repository, String query, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<CollectionEntries> resp = searchWithHttpInfo(repository, query, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Search collections.
     * Search collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query query string (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;CollectionEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntries> searchWithHttpInfo(String repository, String query, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(repository, query, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search collections. (asynchronously)
     * Search collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query query string (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String repository, String query, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<CollectionEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(repository, query, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setCollectionOrder
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body List of nodes in the order to be saved. If empty, custom order of the collection will be disabled (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setCollectionOrderCall(String repository, String collection, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/order"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setCollectionOrderValidateBeforeCall(String repository, String collection, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setCollectionOrder(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling setCollectionOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = setCollectionOrderCall(repository, collection, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set order of nodes in a collection. In order to work as expected, provide a list of all nodes in this collection
     * Current order will be overriden. Requires full permissions for the parent collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body List of nodes in the order to be saved. If empty, custom order of the collection will be disabled (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setCollectionOrder(String repository, String collection, List<String> body) throws ApiException {
        setCollectionOrderWithHttpInfo(repository, collection, body);
    }

    /**
     * Set order of nodes in a collection. In order to work as expected, provide a list of all nodes in this collection
     * Current order will be overriden. Requires full permissions for the parent collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body List of nodes in the order to be saved. If empty, custom order of the collection will be disabled (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setCollectionOrderWithHttpInfo(String repository, String collection, List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = setCollectionOrderValidateBeforeCall(repository, collection, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set order of nodes in a collection. In order to work as expected, provide a list of all nodes in this collection (asynchronously)
     * Current order will be overriden. Requires full permissions for the parent collection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param body List of nodes in the order to be saved. If empty, custom order of the collection will be disabled (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setCollectionOrderAsync(String repository, String collection, List<String> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setCollectionOrderValidateBeforeCall(repository, collection, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setPinnedCollections
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body List of collections that should be pinned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPinnedCollectionsCall(String repository, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/pinning"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPinnedCollectionsValidateBeforeCall(String repository, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setPinnedCollections(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPinnedCollections(Async)");
        }
        

        com.squareup.okhttp.Call call = setPinnedCollectionsCall(repository, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set pinned collections.
     * Remove all currently pinned collections and set them in the order send. Requires TOOLPERMISSION_COLLECTION_PINNING
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body List of collections that should be pinned (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPinnedCollections(String repository, List<String> body) throws ApiException {
        setPinnedCollectionsWithHttpInfo(repository, body);
    }

    /**
     * Set pinned collections.
     * Remove all currently pinned collections and set them in the order send. Requires TOOLPERMISSION_COLLECTION_PINNING
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body List of collections that should be pinned (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPinnedCollectionsWithHttpInfo(String repository, List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = setPinnedCollectionsValidateBeforeCall(repository, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set pinned collections. (asynchronously)
     * Remove all currently pinned collections and set them in the order send. Requires TOOLPERMISSION_COLLECTION_PINNING
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body List of collections that should be pinned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPinnedCollectionsAsync(String repository, List<String> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPinnedCollectionsValidateBeforeCall(repository, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateCollection
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCollectionCall(String repository, Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCollectionValidateBeforeCall(String repository, Node body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updateCollection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCollection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCollectionCall(repository, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a collection.
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCollection(String repository, Node body) throws ApiException {
        updateCollectionWithHttpInfo(repository, body);
    }

    /**
     * Update a collection.
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCollectionWithHttpInfo(String repository, Node body) throws ApiException {
        com.squareup.okhttp.Call call = updateCollectionValidateBeforeCall(repository, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a collection. (asynchronously)
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCollectionAsync(String repository, Node body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCollectionValidateBeforeCall(repository, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
