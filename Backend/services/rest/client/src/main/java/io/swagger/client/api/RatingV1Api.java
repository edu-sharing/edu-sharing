/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RatingV1Api {
    private ApiClient apiClient;

    public RatingV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public RatingV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addOrUpdateRating
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param rating The rating (usually in range 1-5) (required)
     * @param body Text content of rating (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateRatingCall(String repository, String node, Double rating, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rating/v1/ratings/{repository}/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rating != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rating", rating));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addOrUpdateRatingValidateBeforeCall(String repository, String node, Double rating, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addOrUpdateRating(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addOrUpdateRating(Async)");
        }
        
        // verify the required parameter 'rating' is set
        if (rating == null) {
            throw new ApiException("Missing the required parameter 'rating' when calling addOrUpdateRating(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addOrUpdateRating(Async)");
        }
        

        com.squareup.okhttp.Call call = addOrUpdateRatingCall(repository, node, rating, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create or update a rating
     * Adds the rating. If the current user already rated that element, the rating will be altered
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param rating The rating (usually in range 1-5) (required)
     * @param body Text content of rating (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addOrUpdateRating(String repository, String node, Double rating, String body) throws ApiException {
        addOrUpdateRatingWithHttpInfo(repository, node, rating, body);
    }

    /**
     * create or update a rating
     * Adds the rating. If the current user already rated that element, the rating will be altered
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param rating The rating (usually in range 1-5) (required)
     * @param body Text content of rating (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addOrUpdateRatingWithHttpInfo(String repository, String node, Double rating, String body) throws ApiException {
        com.squareup.okhttp.Call call = addOrUpdateRatingValidateBeforeCall(repository, node, rating, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * create or update a rating (asynchronously)
     * Adds the rating. If the current user already rated that element, the rating will be altered
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param rating The rating (usually in range 1-5) (required)
     * @param body Text content of rating (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addOrUpdateRatingAsync(String repository, String node, Double rating, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addOrUpdateRatingValidateBeforeCall(repository, node, rating, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRating
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRatingCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rating/v1/ratings/{repository}/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRatingValidateBeforeCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteRating(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling deleteRating(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRatingCall(repository, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * delete a comment
     * Delete the comment with the given id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRating(String repository, String node) throws ApiException {
        deleteRatingWithHttpInfo(repository, node);
    }

    /**
     * delete a comment
     * Delete the comment with the given id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRatingWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = deleteRatingValidateBeforeCall(repository, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete a comment (asynchronously)
     * Delete the comment with the given id
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRatingAsync(String repository, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRatingValidateBeforeCall(repository, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
