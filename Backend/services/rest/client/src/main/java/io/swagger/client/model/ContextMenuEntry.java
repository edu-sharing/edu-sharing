/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ContextMenuEntry
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class ContextMenuEntry {
  @SerializedName("position")
  private Integer position = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("isDisabled")
  private Boolean isDisabled = false;

  @SerializedName("isSeperate")
  private Boolean isSeperate = false;

  @SerializedName("isSeperateBottom")
  private Boolean isSeperateBottom = false;

  @SerializedName("onlyDesktop")
  private Boolean onlyDesktop = false;

  @SerializedName("mode")
  private String mode = null;

  @SerializedName("ajax")
  private Boolean ajax = false;

  @SerializedName("permission")
  private String permission = null;

  @SerializedName("toolpermission")
  private String toolpermission = null;

  @SerializedName("isDirectory")
  private Boolean isDirectory = false;

  @SerializedName("multiple")
  private Boolean multiple = false;

  @SerializedName("remove")
  private Boolean remove = false;

  public ContextMenuEntry position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @ApiModelProperty(value = "")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }

  public ContextMenuEntry icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @ApiModelProperty(value = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public ContextMenuEntry name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContextMenuEntry url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ContextMenuEntry isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

   /**
   * Get isDisabled
   * @return isDisabled
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  public ContextMenuEntry isSeperate(Boolean isSeperate) {
    this.isSeperate = isSeperate;
    return this;
  }

   /**
   * Get isSeperate
   * @return isSeperate
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSeperate() {
    return isSeperate;
  }

  public void setIsSeperate(Boolean isSeperate) {
    this.isSeperate = isSeperate;
  }

  public ContextMenuEntry isSeperateBottom(Boolean isSeperateBottom) {
    this.isSeperateBottom = isSeperateBottom;
    return this;
  }

   /**
   * Get isSeperateBottom
   * @return isSeperateBottom
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSeperateBottom() {
    return isSeperateBottom;
  }

  public void setIsSeperateBottom(Boolean isSeperateBottom) {
    this.isSeperateBottom = isSeperateBottom;
  }

  public ContextMenuEntry onlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
    return this;
  }

   /**
   * Get onlyDesktop
   * @return onlyDesktop
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyDesktop() {
    return onlyDesktop;
  }

  public void setOnlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
  }

  public ContextMenuEntry mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @ApiModelProperty(value = "")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public ContextMenuEntry ajax(Boolean ajax) {
    this.ajax = ajax;
    return this;
  }

   /**
   * Get ajax
   * @return ajax
  **/
  @ApiModelProperty(value = "")
  public Boolean isAjax() {
    return ajax;
  }

  public void setAjax(Boolean ajax) {
    this.ajax = ajax;
  }

  public ContextMenuEntry permission(String permission) {
    this.permission = permission;
    return this;
  }

   /**
   * Get permission
   * @return permission
  **/
  @ApiModelProperty(value = "")
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }

  public ContextMenuEntry toolpermission(String toolpermission) {
    this.toolpermission = toolpermission;
    return this;
  }

   /**
   * Get toolpermission
   * @return toolpermission
  **/
  @ApiModelProperty(value = "")
  public String getToolpermission() {
    return toolpermission;
  }

  public void setToolpermission(String toolpermission) {
    this.toolpermission = toolpermission;
  }

  public ContextMenuEntry isDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
    return this;
  }

   /**
   * Get isDirectory
   * @return isDirectory
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDirectory() {
    return isDirectory;
  }

  public void setIsDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
  }

  public ContextMenuEntry multiple(Boolean multiple) {
    this.multiple = multiple;
    return this;
  }

   /**
   * Get multiple
   * @return multiple
  **/
  @ApiModelProperty(value = "")
  public Boolean isMultiple() {
    return multiple;
  }

  public void setMultiple(Boolean multiple) {
    this.multiple = multiple;
  }

  public ContextMenuEntry remove(Boolean remove) {
    this.remove = remove;
    return this;
  }

   /**
   * Get remove
   * @return remove
  **/
  @ApiModelProperty(value = "")
  public Boolean isRemove() {
    return remove;
  }

  public void setRemove(Boolean remove) {
    this.remove = remove;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextMenuEntry contextMenuEntry = (ContextMenuEntry) o;
    return Objects.equals(this.position, contextMenuEntry.position) &&
        Objects.equals(this.icon, contextMenuEntry.icon) &&
        Objects.equals(this.name, contextMenuEntry.name) &&
        Objects.equals(this.url, contextMenuEntry.url) &&
        Objects.equals(this.isDisabled, contextMenuEntry.isDisabled) &&
        Objects.equals(this.isSeperate, contextMenuEntry.isSeperate) &&
        Objects.equals(this.isSeperateBottom, contextMenuEntry.isSeperateBottom) &&
        Objects.equals(this.onlyDesktop, contextMenuEntry.onlyDesktop) &&
        Objects.equals(this.mode, contextMenuEntry.mode) &&
        Objects.equals(this.ajax, contextMenuEntry.ajax) &&
        Objects.equals(this.permission, contextMenuEntry.permission) &&
        Objects.equals(this.toolpermission, contextMenuEntry.toolpermission) &&
        Objects.equals(this.isDirectory, contextMenuEntry.isDirectory) &&
        Objects.equals(this.multiple, contextMenuEntry.multiple) &&
        Objects.equals(this.remove, contextMenuEntry.remove);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, icon, name, url, isDisabled, isSeperate, isSeperateBottom, onlyDesktop, mode, ajax, permission, toolpermission, isDirectory, multiple, remove);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextMenuEntry {\n");
    
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    isSeperate: ").append(toIndentedString(isSeperate)).append("\n");
    sb.append("    isSeperateBottom: ").append(toIndentedString(isSeperateBottom)).append("\n");
    sb.append("    onlyDesktop: ").append(toIndentedString(onlyDesktop)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    ajax: ").append(toIndentedString(ajax)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    toolpermission: ").append(toIndentedString(toolpermission)).append("\n");
    sb.append("    isDirectory: ").append(toIndentedString(isDirectory)).append("\n");
    sb.append("    multiple: ").append(toIndentedString(multiple)).append("\n");
    sb.append("    remove: ").append(toIndentedString(remove)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

