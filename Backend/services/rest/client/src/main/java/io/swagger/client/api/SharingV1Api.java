/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.NodeEntries;
import io.swagger.client.model.SharingInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharingV1Api {
    private ApiClient apiClient;

    public SharingV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public SharingV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getChildren
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password (required if share is locked) (optional)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChildrenCall(String repository, String node, String share, String password, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sharing/v1/sharing/{repository}/{node}/{share}/children"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "share" + "\\}", apiClient.escapeString(share.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChildrenValidateBeforeCall(String repository, String node, String share, String password, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getChildren(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getChildren(Async)");
        }
        
        // verify the required parameter 'share' is set
        if (share == null) {
            throw new ApiException("Missing the required parameter 'share' when calling getChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = getChildrenCall(repository, node, share, password, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all children of this share.
     * Only valid for shared folders
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password (required if share is locked) (optional)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return NodeEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntries getChildren(String repository, String node, String share, String password, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<NodeEntries> resp = getChildrenWithHttpInfo(repository, node, share, password, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Get all children of this share.
     * Only valid for shared folders
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password (required if share is locked) (optional)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;NodeEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntries> getChildrenWithHttpInfo(String repository, String node, String share, String password, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = getChildrenValidateBeforeCall(repository, node, share, password, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all children of this share. (asynchronously)
     * Only valid for shared folders
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password (required if share is locked) (optional)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChildrenAsync(String repository, String node, String share, String password, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<NodeEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChildrenValidateBeforeCall(repository, node, share, password, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInfo
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password to validate (optional) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInfoCall(String repository, String node, String share, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sharing/v1/sharing/{repository}/{node}/{share}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
            .replaceAll("\\{" + "share" + "\\}", apiClient.escapeString(share.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInfoValidateBeforeCall(String repository, String node, String share, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getInfo(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getInfo(Async)");
        }
        
        // verify the required parameter 'share' is set
        if (share == null) {
            throw new ApiException("Missing the required parameter 'share' when calling getInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = getInfoCall(repository, node, share, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get general info of a share.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password to validate (optional) (optional)
     * @return SharingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SharingInfo getInfo(String repository, String node, String share, String password) throws ApiException {
        ApiResponse<SharingInfo> resp = getInfoWithHttpInfo(repository, node, share, password);
        return resp.getData();
    }

    /**
     * Get general info of a share.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password to validate (optional) (optional)
     * @return ApiResponse&lt;SharingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SharingInfo> getInfoWithHttpInfo(String repository, String node, String share, String password) throws ApiException {
        com.squareup.okhttp.Call call = getInfoValidateBeforeCall(repository, node, share, password, null, null);
        Type localVarReturnType = new TypeToken<SharingInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general info of a share. (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param share Share token (required)
     * @param password Password to validate (optional) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInfoAsync(String repository, String node, String share, String password, final ApiCallback<SharingInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInfoValidateBeforeCall(repository, node, share, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SharingInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
