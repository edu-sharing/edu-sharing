/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Authority;
import io.swagger.client.model.UserSimple;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * WorkflowHistory
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class WorkflowHistory {
  @SerializedName("time")
  private Long time = null;

  @SerializedName("editor")
  private UserSimple editor = null;

  @SerializedName("receiver")
  private List<Authority> receiver = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("comment")
  private String comment = null;

  public WorkflowHistory time(Long time) {
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @ApiModelProperty(value = "")
  public Long getTime() {
    return time;
  }

  public void setTime(Long time) {
    this.time = time;
  }

  public WorkflowHistory editor(UserSimple editor) {
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @ApiModelProperty(value = "")
  public UserSimple getEditor() {
    return editor;
  }

  public void setEditor(UserSimple editor) {
    this.editor = editor;
  }

  public WorkflowHistory receiver(List<Authority> receiver) {
    this.receiver = receiver;
    return this;
  }

  public WorkflowHistory addReceiverItem(Authority receiverItem) {
    if (this.receiver == null) {
      this.receiver = new ArrayList<Authority>();
    }
    this.receiver.add(receiverItem);
    return this;
  }

   /**
   * Get receiver
   * @return receiver
  **/
  @ApiModelProperty(value = "")
  public List<Authority> getReceiver() {
    return receiver;
  }

  public void setReceiver(List<Authority> receiver) {
    this.receiver = receiver;
  }

  public WorkflowHistory status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public WorkflowHistory comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowHistory workflowHistory = (WorkflowHistory) o;
    return Objects.equals(this.time, workflowHistory.time) &&
        Objects.equals(this.editor, workflowHistory.editor) &&
        Objects.equals(this.receiver, workflowHistory.receiver) &&
        Objects.equals(this.status, workflowHistory.status) &&
        Objects.equals(this.comment, workflowHistory.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, editor, receiver, status, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowHistory {\n");
    
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

