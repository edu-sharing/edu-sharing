/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.RestoreResults;
import io.swagger.client.model.SearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArchiveV1Api {
    private ApiClient apiClient;

    public ArchiveV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ArchiveV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for purge
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purgeCall(String repository, List<String> archivedNodeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive/v1/purge/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (archivedNodeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "archivedNodeIds", archivedNodeIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purgeValidateBeforeCall(String repository, List<String> archivedNodeIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling purge(Async)");
        }
        
        // verify the required parameter 'archivedNodeIds' is set
        if (archivedNodeIds == null) {
            throw new ApiException("Missing the required parameter 'archivedNodeIds' when calling purge(Async)");
        }
        

        com.squareup.okhttp.Call call = purgeCall(repository, archivedNodeIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived node (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String purge(String repository, List<String> archivedNodeIds) throws ApiException {
        ApiResponse<String> resp = purgeWithHttpInfo(repository, archivedNodeIds);
        return resp.getData();
    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived node (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> purgeWithHttpInfo(String repository, List<String> archivedNodeIds) throws ApiException {
        com.squareup.okhttp.Call call = purgeValidateBeforeCall(repository, archivedNodeIds, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for archive nodes. (asynchronously)
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purgeAsync(String repository, List<String> archivedNodeIds, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purgeValidateBeforeCall(repository, archivedNodeIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restore
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived nodes (required)
     * @param target to target (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreCall(String repository, List<String> archivedNodeIds, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive/v1/restore/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (archivedNodeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "archivedNodeIds", archivedNodeIds));
        if (target != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target", target));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreValidateBeforeCall(String repository, List<String> archivedNodeIds, String target, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling restore(Async)");
        }
        
        // verify the required parameter 'archivedNodeIds' is set
        if (archivedNodeIds == null) {
            throw new ApiException("Missing the required parameter 'archivedNodeIds' when calling restore(Async)");
        }
        

        com.squareup.okhttp.Call call = restoreCall(repository, archivedNodeIds, target, progressListener, progressRequestListener);
        return call;

    }

    /**
     * restore archived nodes.
     * restores archived nodes. restoreStatus can have the following values: FALLBACK_PARENT_NOT_EXISTS, FALLBACK_PARENT_NO_PERMISSION, DUPLICATENAME, FINE
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived nodes (required)
     * @param target to target (optional)
     * @return RestoreResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RestoreResults restore(String repository, List<String> archivedNodeIds, String target) throws ApiException {
        ApiResponse<RestoreResults> resp = restoreWithHttpInfo(repository, archivedNodeIds, target);
        return resp.getData();
    }

    /**
     * restore archived nodes.
     * restores archived nodes. restoreStatus can have the following values: FALLBACK_PARENT_NOT_EXISTS, FALLBACK_PARENT_NO_PERMISSION, DUPLICATENAME, FINE
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived nodes (required)
     * @param target to target (optional)
     * @return ApiResponse&lt;RestoreResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RestoreResults> restoreWithHttpInfo(String repository, List<String> archivedNodeIds, String target) throws ApiException {
        com.squareup.okhttp.Call call = restoreValidateBeforeCall(repository, archivedNodeIds, target, null, null);
        Type localVarReturnType = new TypeToken<RestoreResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * restore archived nodes. (asynchronously)
     * restores archived nodes. restoreStatus can have the following values: FALLBACK_PARENT_NOT_EXISTS, FALLBACK_PARENT_NO_PERMISSION, DUPLICATENAME, FINE
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param archivedNodeIds archived nodes (required)
     * @param target to target (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreAsync(String repository, List<String> archivedNodeIds, String target, final ApiCallback<RestoreResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreValidateBeforeCall(repository, archivedNodeIds, target, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestoreResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(String repository, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive/v1/search/{repository}/{pattern}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "pattern" + "\\}", apiClient.escapeString(pattern.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String repository, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling search(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling search(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCall(repository, pattern, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResult search(String repository, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResult> resp = searchWithHttpInfo(repository, pattern, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResult> searchWithHttpInfo(String repository, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(repository, pattern, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for archive nodes. (asynchronously)
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String repository, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(repository, pattern, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search_0
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param person person (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call search_0Call(String repository, String pattern, String person, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/archive/v1/search/{repository}/{pattern}/{person}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "pattern" + "\\}", apiClient.escapeString(pattern.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call search_0ValidateBeforeCall(String repository, String pattern, String person, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling search_0(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling search_0(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling search_0(Async)");
        }
        

        com.squareup.okhttp.Call call = search_0Call(repository, pattern, person, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param person person (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResult search_0(String repository, String pattern, String person, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        ApiResponse<SearchResult> resp = search_0WithHttpInfo(repository, pattern, person, maxItems, skipCount, sortProperties, sortAscending, propertyFilter);
        return resp.getData();
    }

    /**
     * Searches for archive nodes.
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param person person (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResult> search_0WithHttpInfo(String repository, String pattern, String person, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter) throws ApiException {
        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(repository, pattern, person, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, null, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for archive nodes. (asynchronously)
     * Searches for archive nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern search pattern (required)
     * @param person person (required)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending (optional)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call search_0Async(String repository, String pattern, String person, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, List<String> propertyFilter, final ApiCallback<SearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(repository, pattern, person, maxItems, skipCount, sortProperties, sortAscending, propertyFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
