/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SharedFolderOptions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class SharedFolderOptions {
  /**
   * Gets or Sets folders
   */
  @JsonAdapter(FoldersEnum.Adapter.class)
  public enum FoldersEnum {
    NONE("none"),
    
    ASSIGN("assign");

    private String value;

    FoldersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FoldersEnum fromValue(String text) {
      for (FoldersEnum b : FoldersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FoldersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FoldersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FoldersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FoldersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("folders")
  private FoldersEnum folders = null;

  /**
   * Gets or Sets privateFiles
   */
  @JsonAdapter(PrivateFilesEnum.Adapter.class)
  public enum PrivateFilesEnum {
    NONE("none"),
    
    ASSIGN("assign"),
    
    DELETE("delete");

    private String value;

    PrivateFilesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateFilesEnum fromValue(String text) {
      for (PrivateFilesEnum b : PrivateFilesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrivateFilesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateFilesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateFilesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrivateFilesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("privateFiles")
  private PrivateFilesEnum privateFiles = null;

  /**
   * Gets or Sets ccFiles
   */
  @JsonAdapter(CcFilesEnum.Adapter.class)
  public enum CcFilesEnum {
    NONE("none"),
    
    ASSIGN("assign"),
    
    DELETE("delete");

    private String value;

    CcFilesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CcFilesEnum fromValue(String text) {
      for (CcFilesEnum b : CcFilesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CcFilesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CcFilesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CcFilesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CcFilesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ccFiles")
  private CcFilesEnum ccFiles = null;

  @SerializedName("move")
  private Boolean move = false;

  public SharedFolderOptions folders(FoldersEnum folders) {
    this.folders = folders;
    return this;
  }

   /**
   * Get folders
   * @return folders
  **/
  @ApiModelProperty(value = "")
  public FoldersEnum getFolders() {
    return folders;
  }

  public void setFolders(FoldersEnum folders) {
    this.folders = folders;
  }

  public SharedFolderOptions privateFiles(PrivateFilesEnum privateFiles) {
    this.privateFiles = privateFiles;
    return this;
  }

   /**
   * Get privateFiles
   * @return privateFiles
  **/
  @ApiModelProperty(value = "")
  public PrivateFilesEnum getPrivateFiles() {
    return privateFiles;
  }

  public void setPrivateFiles(PrivateFilesEnum privateFiles) {
    this.privateFiles = privateFiles;
  }

  public SharedFolderOptions ccFiles(CcFilesEnum ccFiles) {
    this.ccFiles = ccFiles;
    return this;
  }

   /**
   * Get ccFiles
   * @return ccFiles
  **/
  @ApiModelProperty(value = "")
  public CcFilesEnum getCcFiles() {
    return ccFiles;
  }

  public void setCcFiles(CcFilesEnum ccFiles) {
    this.ccFiles = ccFiles;
  }

  public SharedFolderOptions move(Boolean move) {
    this.move = move;
    return this;
  }

   /**
   * Get move
   * @return move
  **/
  @ApiModelProperty(value = "")
  public Boolean isMove() {
    return move;
  }

  public void setMove(Boolean move) {
    this.move = move;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedFolderOptions sharedFolderOptions = (SharedFolderOptions) o;
    return Objects.equals(this.folders, sharedFolderOptions.folders) &&
        Objects.equals(this.privateFiles, sharedFolderOptions.privateFiles) &&
        Objects.equals(this.ccFiles, sharedFolderOptions.ccFiles) &&
        Objects.equals(this.move, sharedFolderOptions.move);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folders, privateFiles, ccFiles, move);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedFolderOptions {\n");
    
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("    privateFiles: ").append(toIndentedString(privateFiles)).append("\n");
    sb.append("    ccFiles: ").append(toIndentedString(ccFiles)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

