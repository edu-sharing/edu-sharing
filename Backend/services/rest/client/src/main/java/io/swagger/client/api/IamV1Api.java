/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthorityEntries;
import io.swagger.client.model.ErrorResponse;
import java.io.File;
import io.swagger.client.model.Group;
import io.swagger.client.model.GroupEntries;
import io.swagger.client.model.GroupEntry;
import io.swagger.client.model.GroupProfile;
import io.swagger.client.model.NodeEntries;
import io.swagger.client.model.Preferences;
import io.swagger.client.model.User;
import io.swagger.client.model.UserCredential;
import io.swagger.client.model.UserEntries;
import io.swagger.client.model.UserEntry;
import io.swagger.client.model.UserProfileEdit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IamV1Api {
    private ApiClient apiClient;

    public IamV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public IamV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addMembership
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addMembershipCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members/{member}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "member" + "\\}", apiClient.escapeString(member.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMembershipValidateBeforeCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling addMembership(Async)");
        }
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling addMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = addMembershipCall(repository, group, member, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add member to the group.
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addMembership(String repository, String group, String member) throws ApiException {
        addMembershipWithHttpInfo(repository, group, member);
    }

    /**
     * Add member to the group.
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addMembershipWithHttpInfo(String repository, String group, String member) throws ApiException {
        com.squareup.okhttp.Call call = addMembershipValidateBeforeCall(repository, group, member, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add member to the group. (asynchronously)
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMembershipAsync(String repository, String group, String member, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMembershipValidateBeforeCall(repository, group, member, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addNodeList
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name. If this list does not exist, it will be created (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNodeListCall(String repository, String person, String list, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/nodeList/{list}/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()))
            .replaceAll("\\{" + "list" + "\\}", apiClient.escapeString(list.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNodeListValidateBeforeCall(String repository, String person, String list, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addNodeList(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling addNodeList(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling addNodeList(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addNodeList(Async)");
        }
        

        com.squareup.okhttp.Call call = addNodeListCall(repository, person, list, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a node to node a list of a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name. If this list does not exist, it will be created (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNodeList(String repository, String person, String list, String node) throws ApiException {
        addNodeListWithHttpInfo(repository, person, list, node);
    }

    /**
     * Add a node to node a list of a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name. If this list does not exist, it will be created (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNodeListWithHttpInfo(String repository, String person, String list, String node) throws ApiException {
        com.squareup.okhttp.Call call = addNodeListValidateBeforeCall(repository, person, list, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a node to node a list of a user (asynchronously)
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name. If this list does not exist, it will be created (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNodeListAsync(String repository, String person, String list, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNodeListValidateBeforeCall(repository, person, list, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeGroupProfile
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeGroupProfileCall(String repository, String group, GroupProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/profile"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeGroupProfileValidateBeforeCall(String repository, String group, GroupProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeGroupProfile(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling changeGroupProfile(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeGroupProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = changeGroupProfileCall(repository, group, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set profile of the group.
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeGroupProfile(String repository, String group, GroupProfile body) throws ApiException {
        changeGroupProfileWithHttpInfo(repository, group, body);
    }

    /**
     * Set profile of the group.
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeGroupProfileWithHttpInfo(String repository, String group, GroupProfile body) throws ApiException {
        com.squareup.okhttp.Call call = changeGroupProfileValidateBeforeCall(repository, group, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set profile of the group. (asynchronously)
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeGroupProfileAsync(String repository, String group, GroupProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeGroupProfileValidateBeforeCall(repository, group, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeUserAvatar
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param avatar avatar image (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeUserAvatarCall(String repository, String person, File avatar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/avatar"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (avatar != null)
        localVarFormParams.put("avatar", avatar);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserAvatarValidateBeforeCall(String repository, String person, File avatar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeUserAvatar(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling changeUserAvatar(Async)");
        }
        
        // verify the required parameter 'avatar' is set
        if (avatar == null) {
            throw new ApiException("Missing the required parameter 'avatar' when calling changeUserAvatar(Async)");
        }
        

        com.squareup.okhttp.Call call = changeUserAvatarCall(repository, person, avatar, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set avatar of the user.
     * Set avatar of the user. (To set foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param avatar avatar image (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserAvatar(String repository, String person, File avatar) throws ApiException {
        changeUserAvatarWithHttpInfo(repository, person, avatar);
    }

    /**
     * Set avatar of the user.
     * Set avatar of the user. (To set foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param avatar avatar image (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserAvatarWithHttpInfo(String repository, String person, File avatar) throws ApiException {
        com.squareup.okhttp.Call call = changeUserAvatarValidateBeforeCall(repository, person, avatar, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set avatar of the user. (asynchronously)
     * Set avatar of the user. (To set foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param avatar avatar image (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserAvatarAsync(String repository, String person, File avatar, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserAvatarValidateBeforeCall(repository, person, avatar, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeUserPassword
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordCall(String repository, String person, UserCredential body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/credential"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserPasswordValidateBeforeCall(String repository, String person, UserCredential body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeUserPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = changeUserPasswordCall(repository, person, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change/Set password of the user.
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserPassword(String repository, String person, UserCredential body) throws ApiException {
        changeUserPasswordWithHttpInfo(repository, person, body);
    }

    /**
     * Change/Set password of the user.
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserPasswordWithHttpInfo(String repository, String person, UserCredential body) throws ApiException {
        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change/Set password of the user. (asynchronously)
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordAsync(String repository, String person, UserCredential body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeUserProfile
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeUserProfileCall(String repository, String person, UserProfileEdit body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/profile"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserProfileValidateBeforeCall(String repository, String person, UserProfileEdit body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeUserProfile(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling changeUserProfile(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeUserProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = changeUserProfileCall(repository, person, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set profile of the user.
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserProfile(String repository, String person, UserProfileEdit body) throws ApiException {
        changeUserProfileWithHttpInfo(repository, person, body);
    }

    /**
     * Set profile of the user.
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserProfileWithHttpInfo(String repository, String person, UserProfileEdit body) throws ApiException {
        com.squareup.okhttp.Call call = changeUserProfileValidateBeforeCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set profile of the user. (asynchronously)
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserProfileAsync(String repository, String person, UserProfileEdit body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserProfileValidateBeforeCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createGroup
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param parent parent (will be added to this parent, also for name hashing), may be null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGroupCall(String repository, String group, GroupProfile body, String parent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parent != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent", parent));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGroupValidateBeforeCall(String repository, String group, GroupProfile body, String parent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = createGroupCall(repository, group, body, parent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new group.
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param parent parent (will be added to this parent, also for name hashing), may be null (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Group createGroup(String repository, String group, GroupProfile body, String parent) throws ApiException {
        ApiResponse<Group> resp = createGroupWithHttpInfo(repository, group, body, parent);
        return resp.getData();
    }

    /**
     * Create a new group.
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param parent parent (will be added to this parent, also for name hashing), may be null (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Group> createGroupWithHttpInfo(String repository, String group, GroupProfile body, String parent) throws ApiException {
        com.squareup.okhttp.Call call = createGroupValidateBeforeCall(repository, group, body, parent, null, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new group. (asynchronously)
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param parent parent (will be added to this parent, also for name hashing), may be null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupAsync(String repository, String group, GroupProfile body, String parent, final ApiCallback<Group> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupValidateBeforeCall(repository, group, body, parent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUser
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @param password Password, leave empty if you don&#39;t want to set any (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(String repository, String person, UserProfileEdit body, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(String repository, String person, UserProfileEdit body, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createUser(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling createUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(repository, person, body, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new user.
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @param password Password, leave empty if you don&#39;t want to set any (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User createUser(String repository, String person, UserProfileEdit body, String password) throws ApiException {
        ApiResponse<User> resp = createUserWithHttpInfo(repository, person, body, password);
        return resp.getData();
    }

    /**
     * Create a new user.
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @param password Password, leave empty if you don&#39;t want to set any (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> createUserWithHttpInfo(String repository, String person, UserProfileEdit body, String password) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(repository, person, body, password, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new user. (asynchronously)
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @param password Password, leave empty if you don&#39;t want to set any (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(String repository, String person, UserProfileEdit body, String password, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(repository, person, body, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGroup
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGroupCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGroupValidateBeforeCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGroupCall(repository, group, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the group.
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGroup(String repository, String group) throws ApiException {
        deleteGroupWithHttpInfo(repository, group);
    }

    /**
     * Delete the group.
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(String repository, String group) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupValidateBeforeCall(repository, group, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the group. (asynchronously)
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupAsync(String repository, String group, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupValidateBeforeCall(repository, group, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMembership
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMembershipCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members/{member}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "member" + "\\}", apiClient.escapeString(member.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMembershipValidateBeforeCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteMembership(Async)");
        }
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling deleteMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMembershipCall(repository, group, member, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete member from the group.
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMembership(String repository, String group, String member) throws ApiException {
        deleteMembershipWithHttpInfo(repository, group, member);
    }

    /**
     * Delete member from the group.
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMembershipWithHttpInfo(String repository, String group, String member) throws ApiException {
        com.squareup.okhttp.Call call = deleteMembershipValidateBeforeCall(repository, group, member, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete member from the group. (asynchronously)
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMembershipAsync(String repository, String group, String member, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMembershipValidateBeforeCall(repository, group, member, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGroup
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupValidateBeforeCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = getGroupCall(repository, group, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the group.
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return GroupEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupEntry getGroup(String repository, String group) throws ApiException {
        ApiResponse<GroupEntry> resp = getGroupWithHttpInfo(repository, group);
        return resp.getData();
    }

    /**
     * Get the group.
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return ApiResponse&lt;GroupEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupEntry> getGroupWithHttpInfo(String repository, String group) throws ApiException {
        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(repository, group, null, null);
        Type localVarReturnType = new TypeToken<GroupEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the group. (asynchronously)
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupAsync(String repository, String group, final ApiCallback<GroupEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupValidateBeforeCall(repository, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMembership
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name (begins with GROUP_) (required)
     * @param pattern pattern (optional)
     * @param authorityType authorityType either GROUP or USER, empty to show all (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMembershipCall(String repository, String group, String pattern, String authorityType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));
        if (authorityType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorityType", authorityType));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMembershipValidateBeforeCall(String repository, String group, String pattern, String authorityType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getMembership(Async)");
        }
        

        com.squareup.okhttp.Call call = getMembershipCall(repository, group, pattern, authorityType, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all members of the group.
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name (begins with GROUP_) (required)
     * @param pattern pattern (optional)
     * @param authorityType authorityType either GROUP or USER, empty to show all (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return AuthorityEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorityEntries getMembership(String repository, String group, String pattern, String authorityType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<AuthorityEntries> resp = getMembershipWithHttpInfo(repository, group, pattern, authorityType, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Get all members of the group.
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name (begins with GROUP_) (required)
     * @param pattern pattern (optional)
     * @param authorityType authorityType either GROUP or USER, empty to show all (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;AuthorityEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorityEntries> getMembershipWithHttpInfo(String repository, String group, String pattern, String authorityType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = getMembershipValidateBeforeCall(repository, group, pattern, authorityType, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all members of the group. (asynchronously)
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name (begins with GROUP_) (required)
     * @param pattern pattern (optional)
     * @param authorityType authorityType either GROUP or USER, empty to show all (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMembershipAsync(String repository, String group, String pattern, String authorityType, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<AuthorityEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMembershipValidateBeforeCall(repository, group, pattern, authorityType, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeList
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeListCall(String repository, String person, String list, List<String> propertyFilter, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/nodeList/{list}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()))
            .replaceAll("\\{" + "list" + "\\}", apiClient.escapeString(list.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "propertyFilter", propertyFilter));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeListValidateBeforeCall(String repository, String person, String list, List<String> propertyFilter, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNodeList(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling getNodeList(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling getNodeList(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeListCall(repository, person, list, propertyFilter, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a specific node list for a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return NodeEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntries getNodeList(String repository, String person, String list, List<String> propertyFilter, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<NodeEntries> resp = getNodeListWithHttpInfo(repository, person, list, propertyFilter, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Get a specific node list for a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;NodeEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntries> getNodeListWithHttpInfo(String repository, String person, String list, List<String> propertyFilter, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = getNodeListValidateBeforeCall(repository, person, list, propertyFilter, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific node list for a user (asynchronously)
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param propertyFilter property filter for result nodes (or \&quot;-all-\&quot; for all properties) (optional)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeListAsync(String repository, String person, String list, List<String> propertyFilter, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<NodeEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeListValidateBeforeCall(repository, person, list, propertyFilter, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPreferences
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPreferencesCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/preferences"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPreferencesValidateBeforeCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getPreferences(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling getPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = getPreferencesCall(repository, person, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get preferences stored for user
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return Preferences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Preferences getPreferences(String repository, String person) throws ApiException {
        ApiResponse<Preferences> resp = getPreferencesWithHttpInfo(repository, person);
        return resp.getData();
    }

    /**
     * Get preferences stored for user
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return ApiResponse&lt;Preferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Preferences> getPreferencesWithHttpInfo(String repository, String person) throws ApiException {
        com.squareup.okhttp.Call call = getPreferencesValidateBeforeCall(repository, person, null, null);
        Type localVarReturnType = new TypeToken<Preferences>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get preferences stored for user (asynchronously)
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPreferencesAsync(String repository, String person, final ApiCallback<Preferences> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPreferencesValidateBeforeCall(repository, person, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Preferences>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecentlyInvited
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecentlyInvitedCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/authorities/{repository}/recent"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecentlyInvitedValidateBeforeCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getRecentlyInvited(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecentlyInvitedCall(repository, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get recently invited authorities.
     * Get the authorities the current user has recently invited.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return AuthorityEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorityEntries getRecentlyInvited(String repository) throws ApiException {
        ApiResponse<AuthorityEntries> resp = getRecentlyInvitedWithHttpInfo(repository);
        return resp.getData();
    }

    /**
     * Get recently invited authorities.
     * Get the authorities the current user has recently invited.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return ApiResponse&lt;AuthorityEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorityEntries> getRecentlyInvitedWithHttpInfo(String repository) throws ApiException {
        com.squareup.okhttp.Call call = getRecentlyInvitedValidateBeforeCall(repository, null, null);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get recently invited authorities. (asynchronously)
     * Get the authorities the current user has recently invited.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecentlyInvitedAsync(String repository, final ApiCallback<AuthorityEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecentlyInvitedValidateBeforeCall(repository, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubgroupByType
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name of the parent/primary group (begins with GROUP_) (required)
     * @param type authorityType either GROUP or USER, empty to show all (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubgroupByTypeCall(String repository, String group, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/type/{type}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubgroupByTypeValidateBeforeCall(String repository, String group, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getSubgroupByType(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getSubgroupByType(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSubgroupByType(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubgroupByTypeCall(repository, group, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a subgroup by the specified type
     * Get a subgroup by the specified type
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name of the parent/primary group (begins with GROUP_) (required)
     * @param type authorityType either GROUP or USER, empty to show all (required)
     * @return AuthorityEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorityEntries getSubgroupByType(String repository, String group, String type) throws ApiException {
        ApiResponse<AuthorityEntries> resp = getSubgroupByTypeWithHttpInfo(repository, group, type);
        return resp.getData();
    }

    /**
     * Get a subgroup by the specified type
     * Get a subgroup by the specified type
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name of the parent/primary group (begins with GROUP_) (required)
     * @param type authorityType either GROUP or USER, empty to show all (required)
     * @return ApiResponse&lt;AuthorityEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorityEntries> getSubgroupByTypeWithHttpInfo(String repository, String group, String type) throws ApiException {
        com.squareup.okhttp.Call call = getSubgroupByTypeValidateBeforeCall(repository, group, type, null, null);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a subgroup by the specified type (asynchronously)
     * Get a subgroup by the specified type
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group authority name of the parent/primary group (begins with GROUP_) (required)
     * @param type authorityType either GROUP or USER, empty to show all (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubgroupByTypeAsync(String repository, String group, String type, final ApiCallback<AuthorityEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubgroupByTypeValidateBeforeCall(repository, group, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUser
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserValidateBeforeCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getUser(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling getUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserCall(repository, person, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the user.
     * Get the user. (Not all information are feteched for foreign profiles if current user is not an admin)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return UserEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEntry getUser(String repository, String person) throws ApiException {
        ApiResponse<UserEntry> resp = getUserWithHttpInfo(repository, person);
        return resp.getData();
    }

    /**
     * Get the user.
     * Get the user. (Not all information are feteched for foreign profiles if current user is not an admin)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return ApiResponse&lt;UserEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEntry> getUserWithHttpInfo(String repository, String person) throws ApiException {
        com.squareup.okhttp.Call call = getUserValidateBeforeCall(repository, person, null, null);
        Type localVarReturnType = new TypeToken<UserEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the user. (asynchronously)
     * Get the user. (Not all information are feteched for foreign profiles if current user is not an admin)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(String repository, String person, final ApiCallback<UserEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserValidateBeforeCall(repository, person, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserGroups
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person authority name (required)
     * @param pattern pattern (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserGroupsCall(String repository, String person, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/memberships"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserGroupsValidateBeforeCall(String repository, String person, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getUserGroups(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling getUserGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserGroupsCall(repository, person, pattern, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all groups the given user is member of.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person authority name (required)
     * @param pattern pattern (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return GroupEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupEntries getUserGroups(String repository, String person, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<GroupEntries> resp = getUserGroupsWithHttpInfo(repository, person, pattern, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Get all groups the given user is member of.
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person authority name (required)
     * @param pattern pattern (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;GroupEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupEntries> getUserGroupsWithHttpInfo(String repository, String person, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = getUserGroupsValidateBeforeCall(repository, person, pattern, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all groups the given user is member of. (asynchronously)
     * 
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person authority name (required)
     * @param pattern pattern (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserGroupsAsync(String repository, String person, String pattern, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<GroupEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserGroupsValidateBeforeCall(repository, person, pattern, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeNodeList
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param node ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeNodeListCall(String repository, String person, String list, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/nodeList/{list}/{node}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()))
            .replaceAll("\\{" + "list" + "\\}", apiClient.escapeString(list.toString()))
            .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeNodeListValidateBeforeCall(String repository, String person, String list, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling removeNodeList(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling removeNodeList(Async)");
        }
        
        // verify the required parameter 'list' is set
        if (list == null) {
            throw new ApiException("Missing the required parameter 'list' when calling removeNodeList(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling removeNodeList(Async)");
        }
        

        com.squareup.okhttp.Call call = removeNodeListCall(repository, person, list, node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deelete a node of a node list of a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeNodeList(String repository, String person, String list, String node) throws ApiException {
        removeNodeListWithHttpInfo(repository, person, list, node);
    }

    /**
     * Deelete a node of a node list of a user
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeNodeListWithHttpInfo(String repository, String person, String list, String node) throws ApiException {
        com.squareup.okhttp.Call call = removeNodeListValidateBeforeCall(repository, person, list, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deelete a node of a node list of a user (asynchronously)
     * For guest users, the list will be temporary stored in the current session
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param list list name (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeNodeListAsync(String repository, String person, String list, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeNodeListValidateBeforeCall(repository, person, list, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeUserAvatar
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeUserAvatarCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/avatar"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeUserAvatarValidateBeforeCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling removeUserAvatar(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling removeUserAvatar(Async)");
        }
        

        com.squareup.okhttp.Call call = removeUserAvatarCall(repository, person, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove avatar of the user.
     * Remove avatar of the user. (To Remove foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeUserAvatar(String repository, String person) throws ApiException {
        removeUserAvatarWithHttpInfo(repository, person);
    }

    /**
     * Remove avatar of the user.
     * Remove avatar of the user. (To Remove foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeUserAvatarWithHttpInfo(String repository, String person) throws ApiException {
        com.squareup.okhttp.Call call = removeUserAvatarValidateBeforeCall(repository, person, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove avatar of the user. (asynchronously)
     * Remove avatar of the user. (To Remove foreign avatars, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUserAvatarAsync(String repository, String person, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUserAvatarValidateBeforeCall(repository, person, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchAuthorities
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param groupType find a specific groupType (does nothing for persons) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchAuthoritiesCall(String repository, String pattern, Boolean global, String groupType, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/authorities/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));
        if (global != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("global", global));
        if (groupType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupType", groupType));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchAuthoritiesValidateBeforeCall(String repository, String pattern, Boolean global, String groupType, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchAuthorities(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchAuthorities(Async)");
        }
        

        com.squareup.okhttp.Call call = searchAuthoritiesCall(repository, pattern, global, groupType, maxItems, skipCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search authorities.
     * Search authorities.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param groupType find a specific groupType (does nothing for persons) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return AuthorityEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorityEntries searchAuthorities(String repository, String pattern, Boolean global, String groupType, Integer maxItems, Integer skipCount) throws ApiException {
        ApiResponse<AuthorityEntries> resp = searchAuthoritiesWithHttpInfo(repository, pattern, global, groupType, maxItems, skipCount);
        return resp.getData();
    }

    /**
     * Search authorities.
     * Search authorities.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param groupType find a specific groupType (does nothing for persons) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return ApiResponse&lt;AuthorityEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorityEntries> searchAuthoritiesWithHttpInfo(String repository, String pattern, Boolean global, String groupType, Integer maxItems, Integer skipCount) throws ApiException {
        com.squareup.okhttp.Call call = searchAuthoritiesValidateBeforeCall(repository, pattern, global, groupType, maxItems, skipCount, null, null);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search authorities. (asynchronously)
     * Search authorities.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param groupType find a specific groupType (does nothing for persons) (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAuthoritiesAsync(String repository, String pattern, Boolean global, String groupType, Integer maxItems, Integer skipCount, final ApiCallback<AuthorityEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchAuthoritiesValidateBeforeCall(repository, pattern, global, groupType, maxItems, skipCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGroups
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param groupType find a specific groupType (optional)
     * @param global global search context, defaults to true, otherwise just searches for groups within the organizations (optional, default to true)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGroupsCall(String repository, String pattern, String groupType, Boolean global, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));
        if (groupType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupType", groupType));
        if (global != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("global", global));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGroupsValidateBeforeCall(String repository, String pattern, String groupType, Boolean global, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchGroups(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = searchGroupsCall(repository, pattern, groupType, global, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search groups.
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param groupType find a specific groupType (optional)
     * @param global global search context, defaults to true, otherwise just searches for groups within the organizations (optional, default to true)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return GroupEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupEntries searchGroups(String repository, String pattern, String groupType, Boolean global, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<GroupEntries> resp = searchGroupsWithHttpInfo(repository, pattern, groupType, global, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Search groups.
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param groupType find a specific groupType (optional)
     * @param global global search context, defaults to true, otherwise just searches for groups within the organizations (optional, default to true)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;GroupEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupEntries> searchGroupsWithHttpInfo(String repository, String pattern, String groupType, Boolean global, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = searchGroupsValidateBeforeCall(repository, pattern, groupType, global, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search groups. (asynchronously)
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param groupType find a specific groupType (optional)
     * @param global global search context, defaults to true, otherwise just searches for groups within the organizations (optional, default to true)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGroupsAsync(String repository, String pattern, String groupType, Boolean global, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<GroupEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGroupsValidateBeforeCall(repository, pattern, groupType, global, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUser
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param status the user status (e.g. active), if not set, all users are returned (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUserCall(String repository, String pattern, Boolean global, String status, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pattern", pattern));
        if (global != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("global", global));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipCount", skipCount));
        if (sortProperties != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortProperties", sortProperties));
        if (sortAscending != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "sortAscending", sortAscending));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUserValidateBeforeCall(String repository, String pattern, Boolean global, String status, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchUser(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchUser(Async)");
        }
        

        com.squareup.okhttp.Call call = searchUserCall(repository, pattern, global, status, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search users.
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param status the user status (e.g. active), if not set, all users are returned (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return UserEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEntries searchUser(String repository, String pattern, Boolean global, String status, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        ApiResponse<UserEntries> resp = searchUserWithHttpInfo(repository, pattern, global, status, maxItems, skipCount, sortProperties, sortAscending);
        return resp.getData();
    }

    /**
     * Search users.
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param status the user status (e.g. active), if not set, all users are returned (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @return ApiResponse&lt;UserEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEntries> searchUserWithHttpInfo(String repository, String pattern, Boolean global, String status, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending) throws ApiException {
        com.squareup.okhttp.Call call = searchUserValidateBeforeCall(repository, pattern, global, status, maxItems, skipCount, sortProperties, sortAscending, null, null);
        Type localVarReturnType = new TypeToken<UserEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search users. (asynchronously)
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param global global search context, defaults to true, otherwise just searches for users within the organizations (optional, default to true)
     * @param status the user status (e.g. active), if not set, all users are returned (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param sortProperties sort properties (optional)
     * @param sortAscending sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserAsync(String repository, String pattern, Boolean global, String status, Integer maxItems, Integer skipCount, List<String> sortProperties, List<Boolean> sortAscending, final ApiCallback<UserEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserValidateBeforeCall(repository, pattern, global, status, maxItems, skipCount, sortProperties, sortAscending, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setPreferences
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body preferences (json string) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPreferencesCall(String repository, String person, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/preferences"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPreferencesValidateBeforeCall(String repository, String person, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setPreferences(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling setPreferences(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = setPreferencesCall(repository, person, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set preferences for user
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body preferences (json string) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPreferences(String repository, String person, String body) throws ApiException {
        setPreferencesWithHttpInfo(repository, person, body);
    }

    /**
     * Set preferences for user
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body preferences (json string) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPreferencesWithHttpInfo(String repository, String person, String body) throws ApiException {
        com.squareup.okhttp.Call call = setPreferencesValidateBeforeCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set preferences for user (asynchronously)
     * Will fail for guest
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body preferences (json string) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPreferencesAsync(String repository, String person, String body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPreferencesValidateBeforeCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateUserStatus
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param status the new status to set (required)
     * @param notify notify the user via mail (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserStatusCall(String repository, String person, String status, Boolean notify, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/status/{status}"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()))
            .replaceAll("\\{" + "status" + "\\}", apiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (notify != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("notify", notify));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserStatusValidateBeforeCall(String repository, String person, String status, Boolean notify, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updateUserStatus(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling updateUserStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateUserStatus(Async)");
        }
        
        // verify the required parameter 'notify' is set
        if (notify == null) {
            throw new ApiException("Missing the required parameter 'notify' when calling updateUserStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserStatusCall(repository, person, status, notify, progressListener, progressRequestListener);
        return call;

    }

    /**
     * update the user status.
     * update the user status. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param status the new status to set (required)
     * @param notify notify the user via mail (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserStatus(String repository, String person, String status, Boolean notify) throws ApiException {
        updateUserStatusWithHttpInfo(repository, person, status, notify);
    }

    /**
     * update the user status.
     * update the user status. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param status the new status to set (required)
     * @param notify notify the user via mail (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserStatusWithHttpInfo(String repository, String person, String status, Boolean notify) throws ApiException {
        com.squareup.okhttp.Call call = updateUserStatusValidateBeforeCall(repository, person, status, notify, null, null);
        return apiClient.execute(call);
    }

    /**
     * update the user status. (asynchronously)
     * update the user status. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param status the new status to set (required)
     * @param notify notify the user via mail (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserStatusAsync(String repository, String person, String status, Boolean notify, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserStatusValidateBeforeCall(repository, person, status, notify, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
