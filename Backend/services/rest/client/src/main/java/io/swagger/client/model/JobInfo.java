/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.JobDetail;
import io.swagger.client.model.Level;
import io.swagger.client.model.LogEntry;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * JobInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class JobInfo {
  @SerializedName("startTime")
  private Long startTime = null;

  @SerializedName("finishTime")
  private Long finishTime = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("Running"),
    
    FAILED("Failed"),
    
    ABORTED("Aborted"),
    
    FINISHED("Finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("worstLevel")
  private Level worstLevel = null;

  @SerializedName("log")
  private List<LogEntry> log = null;

  @SerializedName("jobDetail")
  private JobDetail jobDetail = null;

  public JobInfo startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @ApiModelProperty(value = "")
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }

  public JobInfo finishTime(Long finishTime) {
    this.finishTime = finishTime;
    return this;
  }

   /**
   * Get finishTime
   * @return finishTime
  **/
  @ApiModelProperty(value = "")
  public Long getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(Long finishTime) {
    this.finishTime = finishTime;
  }

  public JobInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public JobInfo worstLevel(Level worstLevel) {
    this.worstLevel = worstLevel;
    return this;
  }

   /**
   * Get worstLevel
   * @return worstLevel
  **/
  @ApiModelProperty(value = "")
  public Level getWorstLevel() {
    return worstLevel;
  }

  public void setWorstLevel(Level worstLevel) {
    this.worstLevel = worstLevel;
  }

  public JobInfo log(List<LogEntry> log) {
    this.log = log;
    return this;
  }

  public JobInfo addLogItem(LogEntry logItem) {
    if (this.log == null) {
      this.log = new ArrayList<LogEntry>();
    }
    this.log.add(logItem);
    return this;
  }

   /**
   * Get log
   * @return log
  **/
  @ApiModelProperty(value = "")
  public List<LogEntry> getLog() {
    return log;
  }

  public void setLog(List<LogEntry> log) {
    this.log = log;
  }

  public JobInfo jobDetail(JobDetail jobDetail) {
    this.jobDetail = jobDetail;
    return this;
  }

   /**
   * Get jobDetail
   * @return jobDetail
  **/
  @ApiModelProperty(value = "")
  public JobDetail getJobDetail() {
    return jobDetail;
  }

  public void setJobDetail(JobDetail jobDetail) {
    this.jobDetail = jobDetail;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobInfo jobInfo = (JobInfo) o;
    return Objects.equals(this.startTime, jobInfo.startTime) &&
        Objects.equals(this.finishTime, jobInfo.finishTime) &&
        Objects.equals(this.status, jobInfo.status) &&
        Objects.equals(this.worstLevel, jobInfo.worstLevel) &&
        Objects.equals(this.log, jobInfo.log) &&
        Objects.equals(this.jobDetail, jobInfo.jobDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, finishTime, status, worstLevel, log, jobDetail);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobInfo {\n");
    
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    worstLevel: ").append(toIndentedString(worstLevel)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    jobDetail: ").append(toIndentedString(jobDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

