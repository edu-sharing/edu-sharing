/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ConnectorFileType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Connector
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class Connector {
  @SerializedName("id")
  private String id = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("showNew")
  private Boolean showNew = false;

  @SerializedName("parameters")
  private List<String> parameters = null;

  @SerializedName("filetypes")
  private List<ConnectorFileType> filetypes = null;

  @SerializedName("onlyDesktop")
  private Boolean onlyDesktop = false;

  @SerializedName("hasViewMode")
  private Boolean hasViewMode = false;

  public Connector id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Connector icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @ApiModelProperty(value = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Connector showNew(Boolean showNew) {
    this.showNew = showNew;
    return this;
  }

   /**
   * false
   * @return showNew
  **/
  @ApiModelProperty(required = true, value = "false")
  public Boolean isShowNew() {
    return showNew;
  }

  public void setShowNew(Boolean showNew) {
    this.showNew = showNew;
  }

  public Connector parameters(List<String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public Connector addParametersItem(String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<String>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @ApiModelProperty(value = "")
  public List<String> getParameters() {
    return parameters;
  }

  public void setParameters(List<String> parameters) {
    this.parameters = parameters;
  }

  public Connector filetypes(List<ConnectorFileType> filetypes) {
    this.filetypes = filetypes;
    return this;
  }

  public Connector addFiletypesItem(ConnectorFileType filetypesItem) {
    if (this.filetypes == null) {
      this.filetypes = new ArrayList<ConnectorFileType>();
    }
    this.filetypes.add(filetypesItem);
    return this;
  }

   /**
   * Get filetypes
   * @return filetypes
  **/
  @ApiModelProperty(value = "")
  public List<ConnectorFileType> getFiletypes() {
    return filetypes;
  }

  public void setFiletypes(List<ConnectorFileType> filetypes) {
    this.filetypes = filetypes;
  }

  public Connector onlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
    return this;
  }

   /**
   * Get onlyDesktop
   * @return onlyDesktop
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyDesktop() {
    return onlyDesktop;
  }

  public void setOnlyDesktop(Boolean onlyDesktop) {
    this.onlyDesktop = onlyDesktop;
  }

  public Connector hasViewMode(Boolean hasViewMode) {
    this.hasViewMode = hasViewMode;
    return this;
  }

   /**
   * Get hasViewMode
   * @return hasViewMode
  **/
  @ApiModelProperty(value = "")
  public Boolean isHasViewMode() {
    return hasViewMode;
  }

  public void setHasViewMode(Boolean hasViewMode) {
    this.hasViewMode = hasViewMode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connector connector = (Connector) o;
    return Objects.equals(this.id, connector.id) &&
        Objects.equals(this.icon, connector.icon) &&
        Objects.equals(this.showNew, connector.showNew) &&
        Objects.equals(this.parameters, connector.parameters) &&
        Objects.equals(this.filetypes, connector.filetypes) &&
        Objects.equals(this.onlyDesktop, connector.onlyDesktop) &&
        Objects.equals(this.hasViewMode, connector.hasViewMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, icon, showNew, parameters, filetypes, onlyDesktop, hasViewMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connector {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    showNew: ").append(toIndentedString(showNew)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    filetypes: ").append(toIndentedString(filetypes)).append("\n");
    sb.append("    onlyDesktop: ").append(toIndentedString(onlyDesktop)).append("\n");
    sb.append("    hasViewMode: ").append(toIndentedString(hasViewMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

