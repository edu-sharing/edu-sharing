/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.NodeEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolV1Api {
    private ApiClient apiClient;

    public ToolV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createToolDefintition
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createToolDefintitionCall(String repository, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/tooldefinitions"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (renameIfExists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renameIfExists", renameIfExists));
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createToolDefintitionValidateBeforeCall(String repository, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createToolDefintition(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createToolDefintition(Async)");
        }
        

        com.squareup.okhttp.Call call = createToolDefintitionCall(repository, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new tool definition object.
     * Create a new tool definition object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createToolDefintition(String repository, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        ApiResponse<NodeEntry> resp = createToolDefintitionWithHttpInfo(repository, body, renameIfExists, versionComment);
        return resp.getData();
    }

    /**
     * Create a new tool definition object.
     * Create a new tool definition object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createToolDefintitionWithHttpInfo(String repository, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        com.squareup.okhttp.Call call = createToolDefintitionValidateBeforeCall(repository, body, renameIfExists, versionComment, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new tool definition object. (asynchronously)
     * Create a new tool definition object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createToolDefintitionAsync(String repository, Object body, Boolean renameIfExists, String versionComment, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createToolDefintitionValidateBeforeCall(repository, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createToolInstance
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of parent node must have tool_definition aspect (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createToolInstanceCall(String repository, String toolDefinition, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/{toolDefinition}/toolinstances"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "toolDefinition" + "\\}", apiClient.escapeString(toolDefinition.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (renameIfExists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renameIfExists", renameIfExists));
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createToolInstanceValidateBeforeCall(String repository, String toolDefinition, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createToolInstance(Async)");
        }
        
        // verify the required parameter 'toolDefinition' is set
        if (toolDefinition == null) {
            throw new ApiException("Missing the required parameter 'toolDefinition' when calling createToolInstance(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createToolInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = createToolInstanceCall(repository, toolDefinition, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new tool Instance object.
     * Create a new tool Instance object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of parent node must have tool_definition aspect (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createToolInstance(String repository, String toolDefinition, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        ApiResponse<NodeEntry> resp = createToolInstanceWithHttpInfo(repository, toolDefinition, body, renameIfExists, versionComment);
        return resp.getData();
    }

    /**
     * Create a new tool Instance object.
     * Create a new tool Instance object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of parent node must have tool_definition aspect (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createToolInstanceWithHttpInfo(String repository, String toolDefinition, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        com.squareup.okhttp.Call call = createToolInstanceValidateBeforeCall(repository, toolDefinition, body, renameIfExists, versionComment, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new tool Instance object. (asynchronously)
     * Create a new tool Instance object.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of parent node must have tool_definition aspect (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createToolInstanceAsync(String repository, String toolDefinition, Object body, Boolean renameIfExists, String versionComment, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createToolInstanceValidateBeforeCall(repository, toolDefinition, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createToolObject
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolinstance ID of parent node (a tool instance object) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createToolObjectCall(String repository, String toolinstance, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/{toolinstance}/toolobject"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "toolinstance" + "\\}", apiClient.escapeString(toolinstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (renameIfExists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("renameIfExists", renameIfExists));
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("versionComment", versionComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createToolObjectValidateBeforeCall(String repository, String toolinstance, Object body, Boolean renameIfExists, String versionComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createToolObject(Async)");
        }
        
        // verify the required parameter 'toolinstance' is set
        if (toolinstance == null) {
            throw new ApiException("Missing the required parameter 'toolinstance' when calling createToolObject(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createToolObject(Async)");
        }
        

        com.squareup.okhttp.Call call = createToolObjectCall(repository, toolinstance, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new tool object for a given tool instance.
     * Create a new tool object for a given tool instance.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolinstance ID of parent node (a tool instance object) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createToolObject(String repository, String toolinstance, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        ApiResponse<NodeEntry> resp = createToolObjectWithHttpInfo(repository, toolinstance, body, renameIfExists, versionComment);
        return resp.getData();
    }

    /**
     * Create a new tool object for a given tool instance.
     * Create a new tool object for a given tool instance.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolinstance ID of parent node (a tool instance object) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createToolObjectWithHttpInfo(String repository, String toolinstance, Object body, Boolean renameIfExists, String versionComment) throws ApiException {
        com.squareup.okhttp.Call call = createToolObjectValidateBeforeCall(repository, toolinstance, body, renameIfExists, versionComment, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new tool object for a given tool instance. (asynchronously)
     * Create a new tool object for a given tool instance.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolinstance ID of parent node (a tool instance object) (required)
     * @param body properties, example: {\&quot;{http://www.alfresco.org/model/content/1.0}name\&quot;: [\&quot;test\&quot;]} (required)
     * @param renameIfExists rename if the same node name exists (optional, default to false)
     * @param versionComment comment, leave empty &#x3D; no inital version (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createToolObjectAsync(String repository, String toolinstance, Object body, Boolean renameIfExists, String versionComment, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createToolObjectValidateBeforeCall(repository, toolinstance, body, renameIfExists, versionComment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllToolDefinitions
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllToolDefinitionsCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/tooldefinitions"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllToolDefinitionsValidateBeforeCall(String repository, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getAllToolDefinitions(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllToolDefinitionsCall(repository, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all ToolDefinitions.
     * Get all ToolDefinitions.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getAllToolDefinitions(String repository) throws ApiException {
        ApiResponse<NodeEntry> resp = getAllToolDefinitionsWithHttpInfo(repository);
        return resp.getData();
    }

    /**
     * Get all ToolDefinitions.
     * Get all ToolDefinitions.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getAllToolDefinitionsWithHttpInfo(String repository) throws ApiException {
        com.squareup.okhttp.Call call = getAllToolDefinitionsValidateBeforeCall(repository, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all ToolDefinitions. (asynchronously)
     * Get all ToolDefinitions.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllToolDefinitionsAsync(String repository, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllToolDefinitionsValidateBeforeCall(repository, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInstance
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstanceCall(String repository, String nodeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/{nodeid}/toolinstance"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "nodeid" + "\\}", apiClient.escapeString(nodeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstanceValidateBeforeCall(String repository, String nodeid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getInstance(Async)");
        }
        
        // verify the required parameter 'nodeid' is set
        if (nodeid == null) {
            throw new ApiException("Missing the required parameter 'nodeid' when calling getInstance(Async)");
        }
        

        com.squareup.okhttp.Call call = getInstanceCall(repository, nodeid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Instances of a ToolDefinition.
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid ID of node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getInstance(String repository, String nodeid) throws ApiException {
        ApiResponse<NodeEntry> resp = getInstanceWithHttpInfo(repository, nodeid);
        return resp.getData();
    }

    /**
     * Get Instances of a ToolDefinition.
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid ID of node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getInstanceWithHttpInfo(String repository, String nodeid) throws ApiException {
        com.squareup.okhttp.Call call = getInstanceValidateBeforeCall(repository, nodeid, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Instances of a ToolDefinition. (asynchronously)
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param nodeid ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstanceAsync(String repository, String nodeid, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstanceValidateBeforeCall(repository, nodeid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInstances
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInstancesCall(String repository, String toolDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tool/v1/tools/{repository}/{toolDefinition}/toolinstances"
            .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "toolDefinition" + "\\}", apiClient.escapeString(toolDefinition.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInstancesValidateBeforeCall(String repository, String toolDefinition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getInstances(Async)");
        }
        
        // verify the required parameter 'toolDefinition' is set
        if (toolDefinition == null) {
            throw new ApiException("Missing the required parameter 'toolDefinition' when calling getInstances(Async)");
        }
        

        com.squareup.okhttp.Call call = getInstancesCall(repository, toolDefinition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Instances of a ToolDefinition.
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getInstances(String repository, String toolDefinition) throws ApiException {
        ApiResponse<NodeEntry> resp = getInstancesWithHttpInfo(repository, toolDefinition);
        return resp.getData();
    }

    /**
     * Get Instances of a ToolDefinition.
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getInstancesWithHttpInfo(String repository, String toolDefinition) throws ApiException {
        com.squareup.okhttp.Call call = getInstancesValidateBeforeCall(repository, toolDefinition, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Instances of a ToolDefinition. (asynchronously)
     * Get Instances of a ToolDefinition.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param toolDefinition ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInstancesAsync(String repository, String toolDefinition, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInstancesValidateBeforeCall(repository, toolDefinition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
