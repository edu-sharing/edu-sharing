/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AccumulatedRatings;
import io.swagger.client.model.Collection;
import io.swagger.client.model.Content;
import io.swagger.client.model.License;
import io.swagger.client.model.NodeRef;
import io.swagger.client.model.Person;
import io.swagger.client.model.Preview;
import io.swagger.client.model.Remote;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * Node
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-20T14:32:44.166+01:00")
public class Node {
  @SerializedName("remote")
  private Remote remote = null;

  @SerializedName("content")
  private Content content = null;

  @SerializedName("license")
  private License license = null;

  @SerializedName("isDirectory")
  private Boolean isDirectory = false;

  @SerializedName("commentCount")
  private Integer commentCount = null;

  @SerializedName("rating")
  private AccumulatedRatings rating = null;

  @SerializedName("ref")
  private NodeRef ref = null;

  @SerializedName("parent")
  private NodeRef parent = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("aspects")
  private List<String> aspects = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("metadataset")
  private String metadataset = null;

  @SerializedName("repositoryType")
  private String repositoryType = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("createdBy")
  private Person createdBy = null;

  @SerializedName("modifiedAt")
  private OffsetDateTime modifiedAt = null;

  @SerializedName("modifiedBy")
  private Person modifiedBy = null;

  @SerializedName("access")
  private List<String> access = new ArrayList<String>();

  @SerializedName("downloadUrl")
  private String downloadUrl = null;

  @SerializedName("properties")
  private Map<String, List<String>> properties = null;

  @SerializedName("mimetype")
  private String mimetype = null;

  @SerializedName("mediatype")
  private String mediatype = null;

  @SerializedName("size")
  private String size = null;

  @SerializedName("preview")
  private Preview preview = null;

  @SerializedName("iconURL")
  private String iconURL = null;

  @SerializedName("collection")
  private Collection collection = null;

  @SerializedName("owner")
  private Person owner = null;

  public Node remote(Remote remote) {
    this.remote = remote;
    return this;
  }

   /**
   * Get remote
   * @return remote
  **/
  @ApiModelProperty(value = "")
  public Remote getRemote() {
    return remote;
  }

  public void setRemote(Remote remote) {
    this.remote = remote;
  }

  public Node content(Content content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @ApiModelProperty(value = "")
  public Content getContent() {
    return content;
  }

  public void setContent(Content content) {
    this.content = content;
  }

  public Node license(License license) {
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @ApiModelProperty(value = "")
  public License getLicense() {
    return license;
  }

  public void setLicense(License license) {
    this.license = license;
  }

  public Node isDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
    return this;
  }

   /**
   * Get isDirectory
   * @return isDirectory
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDirectory() {
    return isDirectory;
  }

  public void setIsDirectory(Boolean isDirectory) {
    this.isDirectory = isDirectory;
  }

  public Node commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

   /**
   * Get commentCount
   * @return commentCount
  **/
  @ApiModelProperty(value = "")
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }

  public Node rating(AccumulatedRatings rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @ApiModelProperty(value = "")
  public AccumulatedRatings getRating() {
    return rating;
  }

  public void setRating(AccumulatedRatings rating) {
    this.rating = rating;
  }

  public Node ref(NodeRef ref) {
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @ApiModelProperty(required = true, value = "")
  public NodeRef getRef() {
    return ref;
  }

  public void setRef(NodeRef ref) {
    this.ref = ref;
  }

  public Node parent(NodeRef parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @ApiModelProperty(value = "")
  public NodeRef getParent() {
    return parent;
  }

  public void setParent(NodeRef parent) {
    this.parent = parent;
  }

  public Node type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Node aspects(List<String> aspects) {
    this.aspects = aspects;
    return this;
  }

  public Node addAspectsItem(String aspectsItem) {
    if (this.aspects == null) {
      this.aspects = new ArrayList<String>();
    }
    this.aspects.add(aspectsItem);
    return this;
  }

   /**
   * Get aspects
   * @return aspects
  **/
  @ApiModelProperty(value = "")
  public List<String> getAspects() {
    return aspects;
  }

  public void setAspects(List<String> aspects) {
    this.aspects = aspects;
  }

  public Node name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Node title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Node metadataset(String metadataset) {
    this.metadataset = metadataset;
    return this;
  }

   /**
   * Get metadataset
   * @return metadataset
  **/
  @ApiModelProperty(value = "")
  public String getMetadataset() {
    return metadataset;
  }

  public void setMetadataset(String metadataset) {
    this.metadataset = metadataset;
  }

  public Node repositoryType(String repositoryType) {
    this.repositoryType = repositoryType;
    return this;
  }

   /**
   * Get repositoryType
   * @return repositoryType
  **/
  @ApiModelProperty(value = "")
  public String getRepositoryType() {
    return repositoryType;
  }

  public void setRepositoryType(String repositoryType) {
    this.repositoryType = repositoryType;
  }

  public Node createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Node createdBy(Person createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @ApiModelProperty(required = true, value = "")
  public Person getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(Person createdBy) {
    this.createdBy = createdBy;
  }

  public Node modifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Get modifiedAt
   * @return modifiedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public Node modifiedBy(Person modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Get modifiedBy
   * @return modifiedBy
  **/
  @ApiModelProperty(value = "")
  public Person getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(Person modifiedBy) {
    this.modifiedBy = modifiedBy;
  }

  public Node access(List<String> access) {
    this.access = access;
    return this;
  }

  public Node addAccessItem(String accessItem) {
    this.access.add(accessItem);
    return this;
  }

   /**
   * Get access
   * @return access
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getAccess() {
    return access;
  }

  public void setAccess(List<String> access) {
    this.access = access;
  }

  public Node downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * Get downloadUrl
   * @return downloadUrl
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }

  public Node properties(Map<String, List<String>> properties) {
    this.properties = properties;
    return this;
  }

  public Node putPropertiesItem(String key, List<String> propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, List<String>>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<String>> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, List<String>> properties) {
    this.properties = properties;
  }

  public Node mimetype(String mimetype) {
    this.mimetype = mimetype;
    return this;
  }

   /**
   * Get mimetype
   * @return mimetype
  **/
  @ApiModelProperty(value = "")
  public String getMimetype() {
    return mimetype;
  }

  public void setMimetype(String mimetype) {
    this.mimetype = mimetype;
  }

  public Node mediatype(String mediatype) {
    this.mediatype = mediatype;
    return this;
  }

   /**
   * Get mediatype
   * @return mediatype
  **/
  @ApiModelProperty(value = "")
  public String getMediatype() {
    return mediatype;
  }

  public void setMediatype(String mediatype) {
    this.mediatype = mediatype;
  }

  public Node size(String size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @ApiModelProperty(value = "")
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }

  public Node preview(Preview preview) {
    this.preview = preview;
    return this;
  }

   /**
   * Get preview
   * @return preview
  **/
  @ApiModelProperty(value = "")
  public Preview getPreview() {
    return preview;
  }

  public void setPreview(Preview preview) {
    this.preview = preview;
  }

  public Node iconURL(String iconURL) {
    this.iconURL = iconURL;
    return this;
  }

   /**
   * Get iconURL
   * @return iconURL
  **/
  @ApiModelProperty(value = "")
  public String getIconURL() {
    return iconURL;
  }

  public void setIconURL(String iconURL) {
    this.iconURL = iconURL;
  }

  public Node collection(Collection collection) {
    this.collection = collection;
    return this;
  }

   /**
   * Get collection
   * @return collection
  **/
  @ApiModelProperty(required = true, value = "")
  public Collection getCollection() {
    return collection;
  }

  public void setCollection(Collection collection) {
    this.collection = collection;
  }

  public Node owner(Person owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @ApiModelProperty(required = true, value = "")
  public Person getOwner() {
    return owner;
  }

  public void setOwner(Person owner) {
    this.owner = owner;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.remote, node.remote) &&
        Objects.equals(this.content, node.content) &&
        Objects.equals(this.license, node.license) &&
        Objects.equals(this.isDirectory, node.isDirectory) &&
        Objects.equals(this.commentCount, node.commentCount) &&
        Objects.equals(this.rating, node.rating) &&
        Objects.equals(this.ref, node.ref) &&
        Objects.equals(this.parent, node.parent) &&
        Objects.equals(this.type, node.type) &&
        Objects.equals(this.aspects, node.aspects) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.title, node.title) &&
        Objects.equals(this.metadataset, node.metadataset) &&
        Objects.equals(this.repositoryType, node.repositoryType) &&
        Objects.equals(this.createdAt, node.createdAt) &&
        Objects.equals(this.createdBy, node.createdBy) &&
        Objects.equals(this.modifiedAt, node.modifiedAt) &&
        Objects.equals(this.modifiedBy, node.modifiedBy) &&
        Objects.equals(this.access, node.access) &&
        Objects.equals(this.downloadUrl, node.downloadUrl) &&
        Objects.equals(this.properties, node.properties) &&
        Objects.equals(this.mimetype, node.mimetype) &&
        Objects.equals(this.mediatype, node.mediatype) &&
        Objects.equals(this.size, node.size) &&
        Objects.equals(this.preview, node.preview) &&
        Objects.equals(this.iconURL, node.iconURL) &&
        Objects.equals(this.collection, node.collection) &&
        Objects.equals(this.owner, node.owner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remote, content, license, isDirectory, commentCount, rating, ref, parent, type, aspects, name, title, metadataset, repositoryType, createdAt, createdBy, modifiedAt, modifiedBy, access, downloadUrl, properties, mimetype, mediatype, size, preview, iconURL, collection, owner);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    isDirectory: ").append(toIndentedString(isDirectory)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    aspects: ").append(toIndentedString(aspects)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    metadataset: ").append(toIndentedString(metadataset)).append("\n");
    sb.append("    repositoryType: ").append(toIndentedString(repositoryType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    mimetype: ").append(toIndentedString(mimetype)).append("\n");
    sb.append("    mediatype: ").append(toIndentedString(mediatype)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    iconURL: ").append(toIndentedString(iconURL)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

