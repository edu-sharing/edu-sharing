/*
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Collection;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.Usages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsageV1Api {
    private ApiClient apiClient;

    public UsageV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public UsageV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteUsage
     * @param nodeId ID of node (required)
     * @param usageId ID of usage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUsageCall(String nodeId, String usageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/node/{nodeId}/{usageId}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "usageId" + "\\}", apiClient.escapeString(usageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUsageValidateBeforeCall(String nodeId, String usageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteUsage(Async)");
        }
        
        // verify the required parameter 'usageId' is set
        if (usageId == null) {
            throw new ApiException("Missing the required parameter 'usageId' when calling deleteUsage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUsageCall(nodeId, usageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an usage of a node.
     * 
     * @param nodeId ID of node (required)
     * @param usageId ID of usage (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages deleteUsage(String nodeId, String usageId) throws ApiException {
        ApiResponse<Usages> resp = deleteUsageWithHttpInfo(nodeId, usageId);
        return resp.getData();
    }

    /**
     * Delete an usage of a node.
     * 
     * @param nodeId ID of node (required)
     * @param usageId ID of usage (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> deleteUsageWithHttpInfo(String nodeId, String usageId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUsageValidateBeforeCall(nodeId, usageId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an usage of a node. (asynchronously)
     * 
     * @param nodeId ID of node (required)
     * @param usageId ID of usage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUsageAsync(String nodeId, String usageId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUsageValidateBeforeCall(nodeId, usageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsages
     * @param repositoryId ID of repository (required)
     * @param nodeId ID of node. Use -all- for getting usages of all nodes (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsagesCall(String repositoryId, String nodeId, Long from, Long to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/repository/{repositoryId}/{nodeid}"
            .replaceAll("\\{" + "repositoryId" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsagesValidateBeforeCall(String repositoryId, String nodeId, Long from, Long to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getUsages(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getUsages(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsagesCall(repositoryId, nodeId, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param repositoryId ID of repository (required)
     * @param nodeId ID of node. Use -all- for getting usages of all nodes (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getUsages(String repositoryId, String nodeId, Long from, Long to) throws ApiException {
        getUsagesWithHttpInfo(repositoryId, nodeId, from, to);
    }

    /**
     * 
     * 
     * @param repositoryId ID of repository (required)
     * @param nodeId ID of node. Use -all- for getting usages of all nodes (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getUsagesWithHttpInfo(String repositoryId, String nodeId, Long from, Long to) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesValidateBeforeCall(repositoryId, nodeId, from, to, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param repositoryId ID of repository (required)
     * @param nodeId ID of node. Use -all- for getting usages of all nodes (required)
     * @param from from date (optional)
     * @param to to date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesAsync(String repositoryId, String nodeId, Long from, Long to, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesValidateBeforeCall(repositoryId, nodeId, from, to, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUsagesByCourse
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsagesByCourseCall(String appId, String courseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/course/{appId}/{courseId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "courseId" + "\\}", apiClient.escapeString(courseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsagesByCourseValidateBeforeCall(String appId, String courseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUsagesByCourse(Async)");
        }
        
        // verify the required parameter 'courseId' is set
        if (courseId == null) {
            throw new ApiException("Missing the required parameter 'courseId' when calling getUsagesByCourse(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsagesByCourseCall(appId, courseId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all usages of an course.
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsagesByCourse(String appId, String courseId) throws ApiException {
        ApiResponse<Usages> resp = getUsagesByCourseWithHttpInfo(appId, courseId);
        return resp.getData();
    }

    /**
     * Get all usages of an course.
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsagesByCourseWithHttpInfo(String appId, String courseId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesByCourseValidateBeforeCall(appId, courseId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an course. (asynchronously)
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesByCourseAsync(String appId, String courseId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesByCourseValidateBeforeCall(appId, courseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsagesByNode
     * @param nodeId ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsagesByNodeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/node/{nodeId}"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsagesByNodeValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getUsagesByNode(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsagesByNodeCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all usages of an node.
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsagesByNode(String nodeId) throws ApiException {
        ApiResponse<Usages> resp = getUsagesByNodeWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get all usages of an node.
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsagesByNodeWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesByNodeValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an node. (asynchronously)
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesByNodeAsync(String nodeId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesByNodeValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsagesByNodeCollections
     * @param nodeId ID of node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsagesByNodeCollectionsCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/node/{nodeId}/collections"
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsagesByNodeCollectionsValidateBeforeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getUsagesByNodeCollections(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsagesByNodeCollectionsCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all collections where this node is used.
     * 
     * @param nodeId ID of node (required)
     * @return List&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Collection> getUsagesByNodeCollections(String nodeId) throws ApiException {
        ApiResponse<List<Collection>> resp = getUsagesByNodeCollectionsWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get all collections where this node is used.
     * 
     * @param nodeId ID of node (required)
     * @return ApiResponse&lt;List&lt;Collection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Collection>> getUsagesByNodeCollectionsWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesByNodeCollectionsValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all collections where this node is used. (asynchronously)
     * 
     * @param nodeId ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesByNodeCollectionsAsync(String nodeId, final ApiCallback<List<Collection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesByNodeCollectionsValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Collection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsages_0
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsages_0Call(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/v1/usages/{appId}"
            .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsages_0ValidateBeforeCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUsages_0(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsages_0Call(appId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all usages of an application.
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsages_0(String appId) throws ApiException {
        ApiResponse<Usages> resp = getUsages_0WithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get all usages of an application.
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsages_0WithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getUsages_0ValidateBeforeCall(appId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an application. (asynchronously)
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsages_0Async(String appId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsages_0ValidateBeforeCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
