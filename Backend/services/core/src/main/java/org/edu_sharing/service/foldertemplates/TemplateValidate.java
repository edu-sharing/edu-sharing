package org.edu_sharing.service.foldertemplates;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class TemplateValidate {

	public static void validateXML(InputStream xmlFile, File schemaFile, boolean nameSpaceAware, 
			LoggingErrorHandler errHandler) throws Exception
	{
		try {
			// create a SchemaFactory and a Schema
			SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Source schemaSource = new StreamSource(schemaFile);
			Schema schema = schemaFactory.newSchema(schemaSource);
			
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			dbf.setNamespaceAware(true); //so we can correctly validate the file.
			dbf.setSchema(schema);
			dbf.setValidating(false);
			DocumentBuilder db = dbf.newDocumentBuilder();
			db.setErrorHandler(errHandler);
			db.parse(xmlFile);
		}
		catch (SAXParseException spe)
		{
			// error generated by the parser
			String message = "** Parser error! **\n  URI: " + spe.getSystemId() + "\n  Line: " + spe.getLineNumber() + "\n  Message: " + spe.getMessage();
			errHandler.getMessage().add(message);
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			throw new Exception(message, x);
		}
		catch (SAXException sxe)
		{
			Exception x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			errHandler.getMessage().add(x.getMessage());
			throw new Exception("Error during parsing.", x);

		}
		catch (ParserConfigurationException pce)
		{
			throw new Exception("Parser with specified options can't be built.", pce);
		}
		catch (IOException ioe)
		{
			// I/O error
			errHandler.getMessage().add(ioe.getMessage());
			throw new Exception("Error reading file.", ioe);
		}
	}	
}
